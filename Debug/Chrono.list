
Chrono.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800853c  0800853c  0001853c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085c8  080085c8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  080085c8  080085c8  000185c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085d0  080085d0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d0  080085d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080085d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ab8  200001f4  080087cc  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003cac  080087cc  00023cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e40  00000000  00000000  0003e267  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001610  00000000  00000000  000420a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001458  00000000  00000000  000436b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e84  00000000  00000000  00044b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014e07  00000000  00000000  00068994  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c52d3  00000000  00000000  0007d79b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142a6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e9c  00000000  00000000  00142aec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f4 	.word	0x200001f4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008524 	.word	0x08008524

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f8 	.word	0x200001f8
 80001c4:	08008524 	.word	0x08008524

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <init_chrono>:
#include "i2c_display.h"
#include "stdint.h"
#include <string.h>

void init_chrono(volatile chronograph *chrono)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
    chrono->h_index = 0;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
    chrono->v_index = 0;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	705a      	strb	r2, [r3, #1]
    chrono->gate_1_time = 0;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	669a      	str	r2, [r3, #104]	; 0x68
    chrono->gate_2_time = 0;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	66da      	str	r2, [r3, #108]	; 0x6c
    chrono->gate_3_time = 0;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	671a      	str	r2, [r3, #112]	; 0x70
    chrono->reading = 0;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    for(int i = 0; i < H_SIZE; i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	e00c      	b.n	8000d02 <init_chrono+0x4e>
    	strcpy((char *)chrono->history[i], "");
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	3302      	adds	r3, #2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < H_SIZE; i++)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b09      	cmp	r3, #9
 8000d06:	ddef      	ble.n	8000ce8 <init_chrono+0x34>
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <add_history>:

void add_history(char *new, volatile chronograph *chrono)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
    // Move index, or reset it to overwrite once history size is full
    if(chrono->h_index == (H_SIZE - 1))
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b09      	cmp	r3, #9
 8000d26:	d103      	bne.n	8000d30 <add_history+0x1c>
        chrono->h_index = 0;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e006      	b.n	8000d3e <add_history+0x2a>
    else
        chrono->h_index++;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	3301      	adds	r3, #1
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	701a      	strb	r2, [r3, #0]

    // Store value in history buffer
    strcpy((char *)chrono->history[chrono->h_index], new);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	3302      	adds	r3, #2
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f007 fbd9 	bl	800850e <strcpy>

    // Write to SD card here
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <process_reading>:

//
void process_reading(volatile chronograph *chrono)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    chrono->reading = 0;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    uint8_t gates = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	72fb      	strb	r3, [r7, #11]

    uint32_t time_passed = time_meas(chrono->gate_1_time, chrono->gate_2_time,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000d84:	f107 030b 	add.w	r3, r7, #11
 8000d88:	f000 f8f2 	bl	8000f70 <time_meas>
 8000d8c:	60f8      	str	r0, [r7, #12]
                                        chrono->gate_3_time, &gates);

    if(time_passed == 1)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d102      	bne.n	8000d9a <process_reading+0x36>
        error();
 8000d94:	f000 f8de 	bl	8000f54 <error>
 8000d98:	e005      	b.n	8000da6 <process_reading+0x42>
    else
        new_reading(time_passed, gates, chrono);
 8000d9a:	7afb      	ldrb	r3, [r7, #11]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 f80d 	bl	8000dc0 <new_reading>

    chrono->gate_1_time = 0;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	669a      	str	r2, [r3, #104]	; 0x68
    chrono->gate_2_time = 0;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	66da      	str	r2, [r3, #108]	; 0x6c
    chrono->gate_3_time = 0;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <new_reading>:

void new_reading(const uint32_t time_passed, const uint8_t gates, volatile chronograph *chrono)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b091      	sub	sp, #68	; 0x44
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	72fb      	strb	r3, [r7, #11]
    char buff[17];
    char new_read[17];
    double fps = 0;
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	f04f 0400 	mov.w	r4, #0
 8000dd6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

    // FPS calculation
    fps = ((double)(DISTANCE * 1000000) / (time_passed * 12));
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fb39 	bl	800045c <__aeabi_ui2d>
 8000dea:	4603      	mov	r3, r0
 8000dec:	460c      	mov	r4, r1
 8000dee:	461a      	mov	r2, r3
 8000df0:	4623      	mov	r3, r4
 8000df2:	a122      	add	r1, pc, #136	; (adr r1, 8000e7c <new_reading+0xbc>)
 8000df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000df8:	f7ff fcd4 	bl	80007a4 <__aeabi_ddiv>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	460c      	mov	r4, r1
 8000e00:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

    // Copy new reading into the new_read buffer, values stored as formatted strings
    strcpy(new_read, d_to_str(fps, buff+16));
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	3310      	adds	r3, #16
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8000e10:	f000 f910 	bl	8001034 <d_to_str>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f007 fb76 	bl	800850e <strcpy>
    strcat(new_read, " fps ");
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff f9ce 	bl	80001c8 <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4413      	add	r3, r2
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <new_reading+0xb8>)
 8000e38:	6810      	ldr	r0, [r2, #0]
 8000e3a:	6018      	str	r0, [r3, #0]
 8000e3c:	8892      	ldrh	r2, [r2, #4]
 8000e3e:	809a      	strh	r2, [r3, #4]
    strcat(new_read, u_to_str(gates, buff+16));
 8000e40:	7afa      	ldrb	r2, [r7, #11]
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	3310      	adds	r3, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	f000 f96c 	bl	8001128 <u_to_str>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f007 fb49 	bl	80084f0 <strcat>
    strcat(new_read, "\0");
    add_history(new_read, chrono);
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff55 	bl	8000d14 <add_history>
    display_update(chrono);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 f80a 	bl	8000e84 <display_update>
}
 8000e70:	bf00      	nop
 8000e72:	3744      	adds	r7, #68	; 0x44
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	0800853c 	.word	0x0800853c
 8000e7c:	00000000 	.word	0x00000000
 8000e80:	416312d0 	.word	0x416312d0

08000e84 <display_update>:

void display_update(volatile chronograph *chrono)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    char buff[16];

    // Write each history value to the display
    for(int col = 3; col > -1; col--)
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	e030      	b.n	8000ef4 <display_update+0x70>
    {
        lcd_put_cur(col,0);
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 f9df 	bl	800125c <lcd_put_cur>
        HAL_Delay(5);
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f000 feaa 	bl	8001bf8 <HAL_Delay>
        // u_to_str is unsigned integer to string conversion
        // This sends the index number for the reading, what historical value it is at
        // u_to_str takes the last byte in the buffer and works from the end of the string back to the beginning
        lcd_send_string(u_to_str(3 - col - chrono->v_index, buff + 16));
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0303 	rsb	r3, r3, #3
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	7852      	ldrb	r2, [r2, #1]
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	3310      	adds	r3, #16
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	f000 f933 	bl	8001128 <u_to_str>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fa48 	bl	800135a <lcd_send_string>
        lcd_send_string(": ");
 8000eca:	480e      	ldr	r0, [pc, #56]	; (8000f04 <display_update+0x80>)
 8000ecc:	f000 fa45 	bl	800135a <lcd_send_string>
        lcd_send_string((char *)chrono->history[ind(col, chrono)]);
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	69f8      	ldr	r0, [r7, #28]
 8000ed4:	f000 f818 	bl	8000f08 <ind>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fa36 	bl	800135a <lcd_send_string>
    for(int col = 3; col > -1; col--)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	dacb      	bge.n	8000e92 <display_update+0xe>
    }
}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08008544 	.word	0x08008544

08000f08 <ind>:

int ind(int col, volatile chronograph *chrono)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	int ind = chrono->h_index + 3 - col - chrono->v_index;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	1cda      	adds	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	7852      	ldrb	r2, [r2, #1]
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	1a9b      	subs	r3, r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
	while(ind < 0)
 8000f28:	e002      	b.n	8000f30 <ind+0x28>
		ind++;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
	while(ind < 0)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	dbf9      	blt.n	8000f2a <ind+0x22>
	while(ind > H_SIZE)
 8000f36:	e002      	b.n	8000f3e <ind+0x36>
		ind--;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
	while(ind > H_SIZE)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2b0a      	cmp	r3, #10
 8000f42:	dcf9      	bgt.n	8000f38 <ind+0x30>
	return ind;
 8000f44:	68fb      	ldr	r3, [r7, #12]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <error>:

void error()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
    lcd_put_cur(3,0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f000 f97e 	bl	800125c <lcd_put_cur>
    lcd_send_string("ERROR");
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <error+0x18>)
 8000f62:	f000 f9fa 	bl	800135a <lcd_send_string>
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	08008548 	.word	0x08008548

08000f70 <time_meas>:

uint32_t time_meas(const uint32_t tim1, const uint32_t tim2, const uint32_t tim3, uint8_t *gates)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]
    if(tim1 && tim2 && tim3)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d015      	beq.n	8000fb0 <time_meas+0x40>
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d012      	beq.n	8000fb0 <time_meas+0x40>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00f      	beq.n	8000fb0 <time_meas+0x40>
    {
        *gates = 123;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	227b      	movs	r2, #123	; 0x7b
 8000f94:	701a      	strb	r2, [r3, #0]
        return ((tim2 - tim1) + (tim3 - tim2))/168;
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1ad2      	subs	r2, r2, r3
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <time_meas+0xbc>)
 8000fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fac:	085b      	lsrs	r3, r3, #1
 8000fae:	e036      	b.n	800101e <time_meas+0xae>
    }
    else if(tim1 && tim2)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00e      	beq.n	8000fd4 <time_meas+0x64>
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00b      	beq.n	8000fd4 <time_meas+0x64>
    {
        *gates = 12;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	701a      	strb	r2, [r3, #0]
        return (tim2 - tim1)/84;
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	4a19      	ldr	r2, [pc, #100]	; (8001030 <time_meas+0xc0>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	e024      	b.n	800101e <time_meas+0xae>
    }
    else if(tim2 && tim3)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00e      	beq.n	8000ff8 <time_meas+0x88>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00b      	beq.n	8000ff8 <time_meas+0x88>
    {
        *gates = 23;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2217      	movs	r2, #23
 8000fe4:	701a      	strb	r2, [r3, #0]
        return (tim3 - tim2)/84;
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <time_meas+0xc0>)
 8000ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	e012      	b.n	800101e <time_meas+0xae>
    }
    else if(tim1 && tim3)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00e      	beq.n	800101c <time_meas+0xac>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00b      	beq.n	800101c <time_meas+0xac>
    {
        *gates = 13;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	220d      	movs	r2, #13
 8001008:	701a      	strb	r2, [r3, #0]
        return (tim3 - tim1)/168;
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	4a06      	ldr	r2, [pc, #24]	; (800102c <time_meas+0xbc>)
 8001014:	fba2 2303 	umull	r2, r3, r2, r3
 8001018:	085b      	lsrs	r3, r3, #1
 800101a:	e000      	b.n	800101e <time_meas+0xae>
    }
    return 1;
 800101c:	2301      	movs	r3, #1
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	18618619 	.word	0x18618619
 8001030:	30c30c31 	.word	0x30c30c31

08001034 <d_to_str>:

char *d_to_str(double d_x, char *s)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	ed87 0b02 	vstr	d0, [r7, #8]
 800103e:	6078      	str	r0, [r7, #4]
    uint32_t x = d_x*100;
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4b35      	ldr	r3, [pc, #212]	; (800111c <d_to_str+0xe8>)
 8001046:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800104a:	f7ff fa81 	bl	8000550 <__aeabi_dmul>
 800104e:	4603      	mov	r3, r0
 8001050:	460c      	mov	r4, r1
 8001052:	4618      	mov	r0, r3
 8001054:	4621      	mov	r1, r4
 8001056:	f7ff fc8d 	bl	8000974 <__aeabi_d2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	617b      	str	r3, [r7, #20]

    *--s = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3b01      	subs	r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
    if (!x) {
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10a      	bne.n	8001086 <d_to_str+0x52>
    	s -= 4;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b04      	subs	r3, #4
 8001074:	607b      	str	r3, [r7, #4]
        strcpy(s, "0.00");
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a29      	ldr	r2, [pc, #164]	; (8001120 <d_to_str+0xec>)
 800107a:	6810      	ldr	r0, [r2, #0]
 800107c:	6018      	str	r0, [r3, #0]
 800107e:	7912      	ldrb	r2, [r2, #4]
 8001080:	711a      	strb	r2, [r3, #4]
        return s;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e046      	b.n	8001114 <d_to_str+0xe0>
    }
    for (int i = 0; i < 2 && x; i++) {
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	e01a      	b.n	80010c2 <d_to_str+0x8e>
        *--s = '0' + x % 10;
 800108c:	6979      	ldr	r1, [r7, #20]
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <d_to_str+0xf0>)
 8001090:	fba3 2301 	umull	r2, r3, r3, r1
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	1aca      	subs	r2, r1, r3
 80010a0:	b2d3      	uxtb	r3, r2
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	3a01      	subs	r2, #1
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	3330      	adds	r3, #48	; 0x30
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	701a      	strb	r2, [r3, #0]
        x /= 10;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <d_to_str+0xf0>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 2 && x; i++) {
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	3301      	adds	r3, #1
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	dc02      	bgt.n	80010ce <d_to_str+0x9a>
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1de      	bne.n	800108c <d_to_str+0x58>
    }
    *--s = '.';
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	222e      	movs	r2, #46	; 0x2e
 80010d8:	701a      	strb	r2, [r3, #0]
    for (; x; x /= 10)
 80010da:	e017      	b.n	800110c <d_to_str+0xd8>
        *--s = '0' + x % 10;
 80010dc:	6979      	ldr	r1, [r7, #20]
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <d_to_str+0xf0>)
 80010e0:	fba3 2301 	umull	r2, r3, r3, r1
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	1aca      	subs	r2, r1, r3
 80010f0:	b2d3      	uxtb	r3, r2
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	3a01      	subs	r2, #1
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	3330      	adds	r3, #48	; 0x30
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	701a      	strb	r2, [r3, #0]
    for (; x; x /= 10)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <d_to_str+0xf0>)
 8001104:	fba2 2303 	umull	r2, r3, r2, r3
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1e4      	bne.n	80010dc <d_to_str+0xa8>
    return s;
 8001112:	687b      	ldr	r3, [r7, #4]
}
 8001114:	4618      	mov	r0, r3
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	40590000 	.word	0x40590000
 8001120:	08008550 	.word	0x08008550
 8001124:	cccccccd 	.word	0xcccccccd

08001128 <u_to_str>:

char *u_to_str(unsigned x, char *s)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
    *--s = 0;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
    if (!x)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d11e      	bne.n	8001182 <u_to_str+0x5a>
        *--s = '0';
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3b01      	subs	r3, #1
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2230      	movs	r2, #48	; 0x30
 800114e:	701a      	strb	r2, [r3, #0]
    for (; x; x /= 10)
 8001150:	e017      	b.n	8001182 <u_to_str+0x5a>
        *--s = '0' + x % 10;
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <u_to_str+0x70>)
 8001156:	fba3 2301 	umull	r2, r3, r3, r1
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	1aca      	subs	r2, r1, r3
 8001166:	b2d3      	uxtb	r3, r2
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	3a01      	subs	r2, #1
 800116c:	603a      	str	r2, [r7, #0]
 800116e:	3330      	adds	r3, #48	; 0x30
 8001170:	b2da      	uxtb	r2, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	701a      	strb	r2, [r3, #0]
    for (; x; x /= 10)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <u_to_str+0x70>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	08db      	lsrs	r3, r3, #3
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1e4      	bne.n	8001152 <u_to_str+0x2a>
    return s;
 8001188:	683b      	ldr	r3, [r7, #0]
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	cccccccd 	.word	0xcccccccd

0800119c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

// Each byte of data is actually sent in 4 bytes to instruct the display on how
// to interpret the data over its 4 data lines
void lcd_send_cmd (uint8_t cmd)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
    uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f023 030f 	bic.w	r3, r3, #15
 80011ac:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f043 030c 	orr.w	r3, r3, #12
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	f043 030c 	orr.w	r3, r3, #12
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 80011dc:	f107 0208 	add.w	r2, r7, #8
 80011e0:	2364      	movs	r3, #100	; 0x64
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2304      	movs	r3, #4
 80011e6:	214e      	movs	r1, #78	; 0x4e
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <lcd_send_cmd+0x5c>)
 80011ea:	f001 f949 	bl	8002480 <HAL_I2C_Master_Transmit>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000022c 	.word	0x2000022c

080011fc <lcd_send_data>:

// Almost the same as send command, but instructs the display to write directly
// to the correct positions register and display the character
void lcd_send_data (uint8_t data)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f023 030f 	bic.w	r3, r3, #15
 800120c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=0
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	f043 030d 	orr.w	r3, r3, #13
 800121a:	b2db      	uxtb	r3, r3
 800121c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=0
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	f043 0309 	orr.w	r3, r3, #9
 8001224:	b2db      	uxtb	r3, r3
 8001226:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=0
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	f043 030d 	orr.w	r3, r3, #13
 800122e:	b2db      	uxtb	r3, r3
 8001230:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=0
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	f043 0309 	orr.w	r3, r3, #9
 8001238:	b2db      	uxtb	r3, r3
 800123a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 800123c:	f107 0208 	add.w	r2, r7, #8
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2304      	movs	r3, #4
 8001246:	214e      	movs	r1, #78	; 0x4e
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <lcd_send_data+0x5c>)
 800124a:	f001 f919 	bl	8002480 <HAL_I2C_Master_Transmit>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000022c 	.word	0x2000022c

0800125c <lcd_put_cur>:
}

// Set the cursor to any row, col on the display for writing (the cursor is not
// visible with how I have the display set up)
void lcd_put_cur(uint8_t row, uint8_t col)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
    switch (row)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d82e      	bhi.n	80012d0 <lcd_put_cur+0x74>
 8001272:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <lcd_put_cur+0x1c>)
 8001274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001278:	08001289 	.word	0x08001289
 800127c:	0800129b 	.word	0x0800129b
 8001280:	080012ad 	.word	0x080012ad
 8001284:	080012bf 	.word	0x080012bf
    {
        case 0:
            col = 0x80 | (0x80 + col);
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	3b80      	subs	r3, #128	; 0x80
 800128c:	b2db      	uxtb	r3, r3
 800128e:	b25b      	sxtb	r3, r3
 8001290:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001294:	b25b      	sxtb	r3, r3
 8001296:	71bb      	strb	r3, [r7, #6]
            break;
 8001298:	e01a      	b.n	80012d0 <lcd_put_cur+0x74>
        case 1:
            col = 0x80 | (0x40 + col);
 800129a:	79bb      	ldrb	r3, [r7, #6]
 800129c:	3340      	adds	r3, #64	; 0x40
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	71bb      	strb	r3, [r7, #6]
            break;
 80012aa:	e011      	b.n	80012d0 <lcd_put_cur+0x74>
        case 2:
            col = 0x80 | (0x14 + col);
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	3314      	adds	r3, #20
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	71bb      	strb	r3, [r7, #6]
            break;
 80012bc:	e008      	b.n	80012d0 <lcd_put_cur+0x74>
        case 3:
            col = 0x80 | (0x54 + col);
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	3354      	adds	r3, #84	; 0x54
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	71bb      	strb	r3, [r7, #6]
            break;
 80012ce:	bf00      	nop
    }

    lcd_send_cmd (col);
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff62 	bl	800119c <lcd_send_cmd>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <lcd_init>:


void lcd_init (void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80012e4:	2032      	movs	r0, #50	; 0x32
 80012e6:	f000 fc87 	bl	8001bf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012ea:	2030      	movs	r0, #48	; 0x30
 80012ec:	f7ff ff56 	bl	800119c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80012f0:	2005      	movs	r0, #5
 80012f2:	f000 fc81 	bl	8001bf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012f6:	2030      	movs	r0, #48	; 0x30
 80012f8:	f7ff ff50 	bl	800119c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80012fc:	2001      	movs	r0, #1
 80012fe:	f000 fc7b 	bl	8001bf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001302:	2030      	movs	r0, #48	; 0x30
 8001304:	f7ff ff4a 	bl	800119c <lcd_send_cmd>
	HAL_Delay(10);
 8001308:	200a      	movs	r0, #10
 800130a:	f000 fc75 	bl	8001bf8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800130e:	2020      	movs	r0, #32
 8001310:	f7ff ff44 	bl	800119c <lcd_send_cmd>
	HAL_Delay(10);
 8001314:	200a      	movs	r0, #10
 8001316:	f000 fc6f 	bl	8001bf8 <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800131a:	2028      	movs	r0, #40	; 0x28
 800131c:	f7ff ff3e 	bl	800119c <lcd_send_cmd>
	HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f000 fc69 	bl	8001bf8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001326:	2008      	movs	r0, #8
 8001328:	f7ff ff38 	bl	800119c <lcd_send_cmd>
	HAL_Delay(1);
 800132c:	2001      	movs	r0, #1
 800132e:	f000 fc63 	bl	8001bf8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff ff32 	bl	800119c <lcd_send_cmd>
	HAL_Delay(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f000 fc5d 	bl	8001bf8 <HAL_Delay>
	HAL_Delay(1);
 800133e:	2001      	movs	r0, #1
 8001340:	f000 fc5a 	bl	8001bf8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001344:	2006      	movs	r0, #6
 8001346:	f7ff ff29 	bl	800119c <lcd_send_cmd>
	HAL_Delay(1);
 800134a:	2001      	movs	r0, #1
 800134c:	f000 fc54 	bl	8001bf8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001350:	200c      	movs	r0, #12
 8001352:	f7ff ff23 	bl	800119c <lcd_send_cmd>
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}

0800135a <lcd_send_string>:

// Send many characters to the display and increment address
void lcd_send_string (char *str)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001362:	e006      	b.n	8001372 <lcd_send_string+0x18>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff45 	bl	80011fc <lcd_send_data>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f4      	bne.n	8001364 <lcd_send_string+0xa>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001388:	f000 fbc4 	bl	8001b14 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_chrono(&chrono);
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <main+0x30>)
 800138e:	f7ff fc91 	bl	8000cb4 <init_chrono>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001392:	f000 f811 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001396:	f000 f92d 	bl	80015f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800139a:	f000 f877 	bl	800148c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800139e:	f006 fae9 	bl	8007974 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80013a2:	f004 ff49 	bl	8006238 <MX_FATFS_Init>
  MX_SPI1_Init();
 80013a6:	f000 f89f 	bl	80014e8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80013aa:	f000 f8d3 	bl	8001554 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

    lcd_init();
 80013ae:	f7ff ff97 	bl	80012e0 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 80013b2:	e7fe      	b.n	80013b2 <main+0x2e>
 80013b4:	20000280 	.word	0x20000280

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	; 0x50
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	2230      	movs	r2, #48	; 0x30
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f006 ffd2 	bl	8008370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <SystemClock_Config+0xcc>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	4a27      	ldr	r2, [pc, #156]	; (8001484 <SystemClock_Config+0xcc>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ea:	6413      	str	r3, [r2, #64]	; 0x40
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <SystemClock_Config+0xcc>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <SystemClock_Config+0xd0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <SystemClock_Config+0xd0>)
 8001402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <SystemClock_Config+0xd0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001414:	2301      	movs	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141e:	2302      	movs	r3, #2
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001422:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001428:	2308      	movs	r3, #8
 800142a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800142c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001430:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001432:	2302      	movs	r3, #2
 8001434:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001436:	2307      	movs	r3, #7
 8001438:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fcb0 	bl	8003da4 <HAL_RCC_OscConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800144a:	f000 f96d 	bl	8001728 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144e:	230f      	movs	r3, #15
 8001450:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001452:	2302      	movs	r3, #2
 8001454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800145a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800145e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	2105      	movs	r1, #5
 800146c:	4618      	mov	r0, r3
 800146e:	f002 ff09 	bl	8004284 <HAL_RCC_ClockConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001478:	f000 f956 	bl	8001728 <Error_Handler>
  }
}
 800147c:	bf00      	nop
 800147e:	3750      	adds	r7, #80	; 0x50
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_I2C1_Init+0x50>)
 8001492:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <MX_I2C1_Init+0x54>)
 8001494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_I2C1_Init+0x50>)
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <MX_I2C1_Init+0x58>)
 800149a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_I2C1_Init+0x50>)
 80014aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <MX_I2C1_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_I2C1_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_I2C1_Init+0x50>)
 80014ca:	f000 fea1 	bl	8002210 <HAL_I2C_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d4:	f000 f928 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000022c 	.word	0x2000022c
 80014e0:	40005400 	.word	0x40005400
 80014e4:	000186a0 	.word	0x000186a0

080014e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <MX_SPI1_Init+0x64>)
 80014ee:	4a18      	ldr	r2, [pc, #96]	; (8001550 <MX_SPI1_Init+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_SPI1_Init+0x64>)
 80014f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_SPI1_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_SPI1_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_SPI1_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_SPI1_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_SPI1_Init+0x64>)
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_SPI1_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_SPI1_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_SPI1_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_SPI1_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_SPI1_Init+0x64>)
 8001534:	220a      	movs	r2, #10
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_SPI1_Init+0x64>)
 800153a:	f003 f881 	bl	8004640 <HAL_SPI_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001544:	f000 f8f0 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200002f8 	.word	0x200002f8
 8001550:	40013000 	.word	0x40013000

08001554 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MX_TIM2_Init+0x9c>)
 8001572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001576:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_TIM2_Init+0x9c>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_TIM2_Init+0x9c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_TIM2_Init+0x9c>)
 8001586:	f04f 32ff 	mov.w	r2, #4294967295
 800158a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_TIM2_Init+0x9c>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_TIM2_Init+0x9c>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001598:	4815      	ldr	r0, [pc, #84]	; (80015f0 <MX_TIM2_Init+0x9c>)
 800159a:	f003 f8b5 	bl	8004708 <HAL_TIM_Base_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015a4:	f000 f8c0 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4619      	mov	r1, r3
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <MX_TIM2_Init+0x9c>)
 80015b6:	f003 f8f6 	bl	80047a6 <HAL_TIM_ConfigClockSource>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015c0:	f000 f8b2 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM2_Init+0x9c>)
 80015d2:	f003 fad9 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015dc:	f000 f8a4 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_Base_Start(&htim2);
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM2_Init+0x9c>)
 80015e2:	f003 f8bc 	bl	800475e <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000350 	.word	0x20000350

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b42      	ldr	r3, [pc, #264]	; (8001718 <MX_GPIO_Init+0x124>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a41      	ldr	r2, [pc, #260]	; (8001718 <MX_GPIO_Init+0x124>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <MX_GPIO_Init+0x124>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <MX_GPIO_Init+0x124>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a3a      	ldr	r2, [pc, #232]	; (8001718 <MX_GPIO_Init+0x124>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b38      	ldr	r3, [pc, #224]	; (8001718 <MX_GPIO_Init+0x124>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b34      	ldr	r3, [pc, #208]	; (8001718 <MX_GPIO_Init+0x124>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a33      	ldr	r2, [pc, #204]	; (8001718 <MX_GPIO_Init+0x124>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <MX_GPIO_Init+0x124>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <MX_GPIO_Init+0x124>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a2c      	ldr	r2, [pc, #176]	; (8001718 <MX_GPIO_Init+0x124>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <MX_GPIO_Init+0x124>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	2118      	movs	r1, #24
 800167e:	4827      	ldr	r0, [pc, #156]	; (800171c <MX_GPIO_Init+0x128>)
 8001680:	f000 fd88 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2110      	movs	r1, #16
 8001688:	4825      	ldr	r0, [pc, #148]	; (8001720 <MX_GPIO_Init+0x12c>)
 800168a:	f000 fd83 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GATE_1_Pin GATE_2_Pin GATE_3_Pin */
  GPIO_InitStruct.Pin = GATE_1_Pin|GATE_2_Pin|GATE_3_Pin;
 800168e:	2307      	movs	r3, #7
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MX_GPIO_Init+0x130>)
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001696:	2302      	movs	r3, #2
 8001698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	481e      	ldr	r0, [pc, #120]	; (800171c <MX_GPIO_Init+0x128>)
 80016a2:	f000 fbdd 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|BLUE_LED_Pin;
 80016a6:	2318      	movs	r3, #24
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4817      	ldr	r0, [pc, #92]	; (800171c <MX_GPIO_Init+0x128>)
 80016be:	f000 fbcf 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80016c2:	2310      	movs	r3, #16
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4811      	ldr	r0, [pc, #68]	; (8001720 <MX_GPIO_Init+0x12c>)
 80016da:	f000 fbc1 	bl	8001e60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2103      	movs	r1, #3
 80016e2:	2006      	movs	r0, #6
 80016e4:	f000 fb85 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016e8:	2006      	movs	r0, #6
 80016ea:	f000 fb9e 	bl	8001e2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2102      	movs	r1, #2
 80016f2:	2007      	movs	r0, #7
 80016f4:	f000 fb7d 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016f8:	2007      	movs	r0, #7
 80016fa:	f000 fb96 	bl	8001e2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2101      	movs	r1, #1
 8001702:	2008      	movs	r0, #8
 8001704:	f000 fb75 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001708:	2008      	movs	r0, #8
 800170a:	f000 fb8e 	bl	8001e2a <HAL_NVIC_EnableIRQ>

}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020800 	.word	0x40020800
 8001724:	10110000 	.word	0x10110000

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	lcd_put_cur(0,0);
 800172c:	2100      	movs	r1, #0
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fd94 	bl	800125c <lcd_put_cur>
	lcd_send_string("ERROR HANDLER");
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <Error_Handler+0x18>)
 8001736:	f7ff fe10 	bl	800135a <lcd_send_string>
  /* USER CODE END Error_Handler_Debug */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	08008558 	.word	0x08008558

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_MspInit+0x4c>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x4c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_I2C_MspInit+0x84>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d12b      	bne.n	800180e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d2:	23c0      	movs	r3, #192	; 0xc0
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d6:	2312      	movs	r3, #18
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017da:	2301      	movs	r3, #1
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e2:	2304      	movs	r3, #4
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <HAL_I2C_MspInit+0x8c>)
 80017ee:	f000 fb37 	bl	8001e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_I2C_MspInit+0x88>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40005400 	.word	0x40005400
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400

08001824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <HAL_SPI_MspInit+0x84>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12b      	bne.n	800189e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_SPI_MspInit+0x88>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_SPI_MspInit+0x88>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800187e:	23e0      	movs	r3, #224	; 0xe0
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188e:	2305      	movs	r3, #5
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_SPI_MspInit+0x8c>)
 800189a:	f000 fae1 	bl	8001e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40013000 	.word	0x40013000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000

080018b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c4:	d10d      	bne.n	80018e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_TIM_Base_MspInit+0x3c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_TIM_Base_MspInit+0x3c>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_TIM_Base_MspInit+0x3c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <MemManage_Handler+0x4>

0800190e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <UsageFault_Handler+0x4>

0800191a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001948:	f000 f936 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	// Clear interrupt
	EXTI->PR = 0x0001;
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <EXTI0_IRQHandler+0x40>)
 8001956:	2201      	movs	r2, #1
 8001958:	615a      	str	r2, [r3, #20]
	chrono.gate_1_time = TIM2->CNT;
 800195a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <EXTI0_IRQHandler+0x44>)
 8001962:	6693      	str	r3, [r2, #104]	; 0x68

	chrono.reading = 1;
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <EXTI0_IRQHandler+0x44>)
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	HAL_Delay(100);
 800196c:	2064      	movs	r0, #100	; 0x64
 800196e:	f000 f943 	bl	8001bf8 <HAL_Delay>
	if(chrono.reading == 1)
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <EXTI0_IRQHandler+0x44>)
 8001974:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d102      	bne.n	8001984 <EXTI0_IRQHandler+0x34>
		process_reading(&chrono);
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <EXTI0_IRQHandler+0x44>)
 8001980:	f7ff f9f0 	bl	8000d64 <process_reading>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001984:	2001      	movs	r0, #1
 8001986:	f000 fc1f 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40013c00 	.word	0x40013c00
 8001994:	20000280 	.word	0x20000280

08001998 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	// Clear interrupt
	EXTI->PR = 0x0002;
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <EXTI1_IRQHandler+0x40>)
 800199e:	2202      	movs	r2, #2
 80019a0:	615a      	str	r2, [r3, #20]
	chrono.gate_2_time = TIM2->CNT;
 80019a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <EXTI1_IRQHandler+0x44>)
 80019aa:	66d3      	str	r3, [r2, #108]	; 0x6c

	chrono.reading = 1;
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <EXTI1_IRQHandler+0x44>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	HAL_Delay(100);
 80019b4:	2064      	movs	r0, #100	; 0x64
 80019b6:	f000 f91f 	bl	8001bf8 <HAL_Delay>
	if(chrono.reading == 1)
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <EXTI1_IRQHandler+0x44>)
 80019bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d102      	bne.n	80019cc <EXTI1_IRQHandler+0x34>
		process_reading(&chrono);
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <EXTI1_IRQHandler+0x44>)
 80019c8:	f7ff f9cc 	bl	8000d64 <process_reading>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80019cc:	2002      	movs	r0, #2
 80019ce:	f000 fbfb 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40013c00 	.word	0x40013c00
 80019dc:	20000280 	.word	0x20000280

080019e0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	// Clear interrupt
	EXTI->PR = 0x0004;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <EXTI2_IRQHandler+0x40>)
 80019e6:	2204      	movs	r2, #4
 80019e8:	615a      	str	r2, [r3, #20]
	chrono.gate_3_time = TIM2->CNT;
 80019ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <EXTI2_IRQHandler+0x44>)
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70

	chrono.reading = 1;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <EXTI2_IRQHandler+0x44>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	HAL_Delay(100);
 80019fc:	2064      	movs	r0, #100	; 0x64
 80019fe:	f000 f8fb 	bl	8001bf8 <HAL_Delay>
	if(chrono.reading == 1)
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <EXTI2_IRQHandler+0x44>)
 8001a04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d102      	bne.n	8001a14 <EXTI2_IRQHandler+0x34>
		process_reading(&chrono);
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <EXTI2_IRQHandler+0x44>)
 8001a10:	f7ff f9a8 	bl	8000d64 <process_reading>
  /* USER CODE END EXTI2_IRQn 0 */
	  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001a14:	2004      	movs	r0, #4
 8001a16:	f000 fbd7 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40013c00 	.word	0x40013c00
 8001a24:	20000280 	.word	0x20000280

08001a28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <OTG_FS_IRQHandler+0x10>)
 8001a2e:	f001 f97e 	bl	8002d2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200038a0 	.word	0x200038a0

08001a3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x50>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x16>
		heap_end = &end;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <_sbrk+0x50>)
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <_sbrk+0x54>)
 8001a50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <_sbrk+0x50>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <_sbrk+0x50>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	466a      	mov	r2, sp
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d907      	bls.n	8001a76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a66:	f006 fc49 	bl	80082fc <__errno>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	e006      	b.n	8001a84 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <_sbrk+0x50>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <_sbrk+0x50>)
 8001a80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000210 	.word	0x20000210
 8001a90:	20003cb0 	.word	0x20003cb0

08001a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <SystemInit+0x28>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <SystemInit+0x28>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SystemInit+0x28>)
 8001aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aae:	609a      	str	r2, [r3, #8]
#endif
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ac4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ac6:	e003      	b.n	8001ad0 <LoopCopyDataInit>

08001ac8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001acc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ace:	3104      	adds	r1, #4

08001ad0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ad0:	480b      	ldr	r0, [pc, #44]	; (8001b00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ad4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ad6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ad8:	d3f6      	bcc.n	8001ac8 <CopyDataInit>
  ldr  r2, =_sbss
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001adc:	e002      	b.n	8001ae4 <LoopFillZerobss>

08001ade <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ade:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ae0:	f842 3b04 	str.w	r3, [r2], #4

08001ae4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ae6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ae8:	d3f9      	bcc.n	8001ade <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aea:	f7ff ffd3 	bl	8001a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f006 fc0b 	bl	8008308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7ff fc47 	bl	8001384 <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001af8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001afc:	080085d8 	.word	0x080085d8
  ldr  r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b04:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001b08:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001b0c:	20003cac 	.word	0x20003cac

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f94d 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fdfc 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f965 	bl	8001e46 <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f92d 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000390 	.word	0x20000390

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000390 	.word	0x20000390

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_Delay+0x40>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000008 	.word	0x20000008

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	e16b      	b.n	8002154 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 815a 	bne.w	800214e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d00b      	beq.n	8001eba <HAL_GPIO_Init+0x5a>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d007      	beq.n	8001eba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eae:	2b11      	cmp	r3, #17
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b12      	cmp	r3, #18
 8001eb8:	d130      	bne.n	8001f1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 0201 	and.w	r2, r3, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0xfc>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b12      	cmp	r3, #18
 8001f5a:	d123      	bne.n	8001fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80b4 	beq.w	800214e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <HAL_GPIO_Init+0x308>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a5e      	ldr	r2, [pc, #376]	; (8002168 <HAL_GPIO_Init+0x308>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <HAL_GPIO_Init+0x308>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002002:	4a5a      	ldr	r2, [pc, #360]	; (800216c <HAL_GPIO_Init+0x30c>)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a51      	ldr	r2, [pc, #324]	; (8002170 <HAL_GPIO_Init+0x310>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d02b      	beq.n	8002086 <HAL_GPIO_Init+0x226>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a50      	ldr	r2, [pc, #320]	; (8002174 <HAL_GPIO_Init+0x314>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d025      	beq.n	8002082 <HAL_GPIO_Init+0x222>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4f      	ldr	r2, [pc, #316]	; (8002178 <HAL_GPIO_Init+0x318>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d01f      	beq.n	800207e <HAL_GPIO_Init+0x21e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4e      	ldr	r2, [pc, #312]	; (800217c <HAL_GPIO_Init+0x31c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d019      	beq.n	800207a <HAL_GPIO_Init+0x21a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4d      	ldr	r2, [pc, #308]	; (8002180 <HAL_GPIO_Init+0x320>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_GPIO_Init+0x216>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_GPIO_Init+0x324>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00d      	beq.n	8002072 <HAL_GPIO_Init+0x212>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4b      	ldr	r2, [pc, #300]	; (8002188 <HAL_GPIO_Init+0x328>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <HAL_GPIO_Init+0x20e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4a      	ldr	r2, [pc, #296]	; (800218c <HAL_GPIO_Init+0x32c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_GPIO_Init+0x20a>
 8002066:	2307      	movs	r3, #7
 8002068:	e00e      	b.n	8002088 <HAL_GPIO_Init+0x228>
 800206a:	2308      	movs	r3, #8
 800206c:	e00c      	b.n	8002088 <HAL_GPIO_Init+0x228>
 800206e:	2306      	movs	r3, #6
 8002070:	e00a      	b.n	8002088 <HAL_GPIO_Init+0x228>
 8002072:	2305      	movs	r3, #5
 8002074:	e008      	b.n	8002088 <HAL_GPIO_Init+0x228>
 8002076:	2304      	movs	r3, #4
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x228>
 800207a:	2303      	movs	r3, #3
 800207c:	e004      	b.n	8002088 <HAL_GPIO_Init+0x228>
 800207e:	2302      	movs	r3, #2
 8002080:	e002      	b.n	8002088 <HAL_GPIO_Init+0x228>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x228>
 8002086:	2300      	movs	r3, #0
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	f002 0203 	and.w	r2, r2, #3
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4093      	lsls	r3, r2
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002098:	4934      	ldr	r1, [pc, #208]	; (800216c <HAL_GPIO_Init+0x30c>)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	3302      	adds	r3, #2
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a6:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_GPIO_Init+0x330>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ca:	4a31      	ldr	r2, [pc, #196]	; (8002190 <HAL_GPIO_Init+0x330>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020d0:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_GPIO_Init+0x330>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f4:	4a26      	ldr	r2, [pc, #152]	; (8002190 <HAL_GPIO_Init+0x330>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b25      	ldr	r3, [pc, #148]	; (8002190 <HAL_GPIO_Init+0x330>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <HAL_GPIO_Init+0x330>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_GPIO_Init+0x330>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_GPIO_Init+0x330>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3301      	adds	r3, #1
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	2b0f      	cmp	r3, #15
 8002158:	f67f ae90 	bls.w	8001e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800215c:	bf00      	nop
 800215e:	3724      	adds	r7, #36	; 0x24
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40023800 	.word	0x40023800
 800216c:	40013800 	.word	0x40013800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020400 	.word	0x40020400
 8002178:	40020800 	.word	0x40020800
 800217c:	40020c00 	.word	0x40020c00
 8002180:	40021000 	.word	0x40021000
 8002184:	40021400 	.word	0x40021400
 8002188:	40021800 	.word	0x40021800
 800218c:	40021c00 	.word	0x40021c00
 8002190:	40013c00 	.word	0x40013c00

08002194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b0:	e003      	b.n	80021ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	041a      	lsls	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	619a      	str	r2, [r3, #24]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f806 	bl	80021f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40013c00 	.word	0x40013c00

080021f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e11f      	b.n	8002462 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff faac 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2224      	movs	r2, #36	; 0x24
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002262:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002272:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002274:	f002 f9d0 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8002278:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a7b      	ldr	r2, [pc, #492]	; (800246c <HAL_I2C_Init+0x25c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d807      	bhi.n	8002294 <HAL_I2C_Init+0x84>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a7a      	ldr	r2, [pc, #488]	; (8002470 <HAL_I2C_Init+0x260>)
 8002288:	4293      	cmp	r3, r2
 800228a:	bf94      	ite	ls
 800228c:	2301      	movls	r3, #1
 800228e:	2300      	movhi	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	e006      	b.n	80022a2 <HAL_I2C_Init+0x92>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4a77      	ldr	r2, [pc, #476]	; (8002474 <HAL_I2C_Init+0x264>)
 8002298:	4293      	cmp	r3, r2
 800229a:	bf94      	ite	ls
 800229c:	2301      	movls	r3, #1
 800229e:	2300      	movhi	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0db      	b.n	8002462 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4a72      	ldr	r2, [pc, #456]	; (8002478 <HAL_I2C_Init+0x268>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0c9b      	lsrs	r3, r3, #18
 80022b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4a64      	ldr	r2, [pc, #400]	; (800246c <HAL_I2C_Init+0x25c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d802      	bhi.n	80022e4 <HAL_I2C_Init+0xd4>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3301      	adds	r3, #1
 80022e2:	e009      	b.n	80022f8 <HAL_I2C_Init+0xe8>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	4a63      	ldr	r2, [pc, #396]	; (800247c <HAL_I2C_Init+0x26c>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	3301      	adds	r3, #1
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	430b      	orrs	r3, r1
 80022fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800230a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4956      	ldr	r1, [pc, #344]	; (800246c <HAL_I2C_Init+0x25c>)
 8002314:	428b      	cmp	r3, r1
 8002316:	d80d      	bhi.n	8002334 <HAL_I2C_Init+0x124>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e59      	subs	r1, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fbb1 f3f3 	udiv	r3, r1, r3
 8002326:	3301      	adds	r3, #1
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	2b04      	cmp	r3, #4
 800232e:	bf38      	it	cc
 8002330:	2304      	movcc	r3, #4
 8002332:	e04f      	b.n	80023d4 <HAL_I2C_Init+0x1c4>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d111      	bne.n	8002360 <HAL_I2C_Init+0x150>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e58      	subs	r0, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	440b      	add	r3, r1
 800234a:	fbb0 f3f3 	udiv	r3, r0, r3
 800234e:	3301      	adds	r3, #1
 8002350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	e012      	b.n	8002386 <HAL_I2C_Init+0x176>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	0099      	lsls	r1, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	fbb0 f3f3 	udiv	r3, r0, r3
 8002376:	3301      	adds	r3, #1
 8002378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Init+0x17e>
 800238a:	2301      	movs	r3, #1
 800238c:	e022      	b.n	80023d4 <HAL_I2C_Init+0x1c4>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10e      	bne.n	80023b4 <HAL_I2C_Init+0x1a4>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1e58      	subs	r0, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6859      	ldr	r1, [r3, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	440b      	add	r3, r1
 80023a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a8:	3301      	adds	r3, #1
 80023aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b2:	e00f      	b.n	80023d4 <HAL_I2C_Init+0x1c4>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1e58      	subs	r0, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	0099      	lsls	r1, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	6809      	ldr	r1, [r1, #0]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6911      	ldr	r1, [r2, #16]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68d2      	ldr	r2, [r2, #12]
 800240e:	4311      	orrs	r1, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	430b      	orrs	r3, r1
 8002416:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	000186a0 	.word	0x000186a0
 8002470:	001e847f 	.word	0x001e847f
 8002474:	003d08ff 	.word	0x003d08ff
 8002478:	431bde83 	.word	0x431bde83
 800247c:	10624dd3 	.word	0x10624dd3

08002480 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	461a      	mov	r2, r3
 800248c:	460b      	mov	r3, r1
 800248e:	817b      	strh	r3, [r7, #10]
 8002490:	4613      	mov	r3, r2
 8002492:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff fba4 	bl	8001be0 <HAL_GetTick>
 8002498:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	f040 80e0 	bne.w	8002668 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2319      	movs	r3, #25
 80024ae:	2201      	movs	r2, #1
 80024b0:	4970      	ldr	r1, [pc, #448]	; (8002674 <HAL_I2C_Master_Transmit+0x1f4>)
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f964 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024be:	2302      	movs	r3, #2
 80024c0:	e0d3      	b.n	800266a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_I2C_Master_Transmit+0x50>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e0cc      	b.n	800266a <HAL_I2C_Master_Transmit+0x1ea>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d007      	beq.n	80024f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0201 	orr.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002504:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2221      	movs	r2, #33	; 0x21
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2210      	movs	r2, #16
 8002512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	893a      	ldrh	r2, [r7, #8]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a50      	ldr	r2, [pc, #320]	; (8002678 <HAL_I2C_Master_Transmit+0x1f8>)
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002538:	8979      	ldrh	r1, [r7, #10]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	6a3a      	ldr	r2, [r7, #32]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f89c 	bl	800267c <I2C_MasterRequestWrite>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e08d      	b.n	800266a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002564:	e066      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	6a39      	ldr	r1, [r7, #32]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f9de 	bl	800292c <I2C_WaitOnTXEFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00d      	beq.n	8002592 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b04      	cmp	r3, #4
 800257c:	d107      	bne.n	800258e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06b      	b.n	800266a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d11b      	bne.n	8002608 <HAL_I2C_Master_Transmit+0x188>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d017      	beq.n	8002608 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	781a      	ldrb	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	6a39      	ldr	r1, [r7, #32]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f9ce 	bl	80029ae <I2C_WaitOnBTFFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	2b04      	cmp	r3, #4
 800261e:	d107      	bne.n	8002630 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e01a      	b.n	800266a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	d194      	bne.n	8002566 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	00100002 	.word	0x00100002
 8002678:	ffff0000 	.word	0xffff0000

0800267c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	460b      	mov	r3, r1
 800268a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d006      	beq.n	80026a6 <I2C_MasterRequestWrite+0x2a>
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d003      	beq.n	80026a6 <I2C_MasterRequestWrite+0x2a>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026a4:	d108      	bne.n	80026b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e00b      	b.n	80026d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	2b12      	cmp	r3, #18
 80026be:	d107      	bne.n	80026d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f84f 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00c      	beq.n	8002702 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e035      	b.n	800276e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800270a:	d108      	bne.n	800271e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800270c:	897b      	ldrh	r3, [r7, #10]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800271a:	611a      	str	r2, [r3, #16]
 800271c:	e01b      	b.n	8002756 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	11db      	asrs	r3, r3, #7
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f003 0306 	and.w	r3, r3, #6
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f063 030f 	orn	r3, r3, #15
 800272e:	b2da      	uxtb	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	490f      	ldr	r1, [pc, #60]	; (8002778 <I2C_MasterRequestWrite+0xfc>)
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f876 	bl	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e010      	b.n	800276e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800274c:	897b      	ldrh	r3, [r7, #10]
 800274e:	b2da      	uxtb	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	4908      	ldr	r1, [pc, #32]	; (800277c <I2C_MasterRequestWrite+0x100>)
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f866 	bl	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	00010008 	.word	0x00010008
 800277c:	00010002 	.word	0x00010002

08002780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002790:	e025      	b.n	80027de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d021      	beq.n	80027de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279a:	f7ff fa21 	bl	8001be0 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d302      	bcc.n	80027b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d116      	bne.n	80027de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f043 0220 	orr.w	r2, r3, #32
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e023      	b.n	8002826 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10d      	bne.n	8002804 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4013      	ands	r3, r2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	e00c      	b.n	800281e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	43da      	mvns	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4013      	ands	r3, r2
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	429a      	cmp	r2, r3
 8002822:	d0b6      	beq.n	8002792 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800283c:	e051      	b.n	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284c:	d123      	bne.n	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002866:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f043 0204 	orr.w	r2, r3, #4
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e046      	b.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d021      	beq.n	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7ff f99f 	bl	8001be0 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f043 0220 	orr.w	r2, r3, #32
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e020      	b.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d10c      	bne.n	8002906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4013      	ands	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	e00b      	b.n	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	43da      	mvns	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4013      	ands	r3, r2
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d18d      	bne.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002938:	e02d      	b.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f878 	bl	8002a30 <I2C_IsAcknowledgeFailed>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e02d      	b.n	80029a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d021      	beq.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7ff f945 	bl	8001be0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d116      	bne.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e007      	b.n	80029a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	2b80      	cmp	r3, #128	; 0x80
 80029a2:	d1ca      	bne.n	800293a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ba:	e02d      	b.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f837 	bl	8002a30 <I2C_IsAcknowledgeFailed>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e02d      	b.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d021      	beq.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d4:	f7ff f904 	bl	8001be0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d302      	bcc.n	80029ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d116      	bne.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e007      	b.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d1ca      	bne.n	80029bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a46:	d11b      	bne.n	8002a80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a90:	b08f      	sub	sp, #60	; 0x3c
 8002a92:	af0a      	add	r7, sp, #40	; 0x28
 8002a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e10f      	b.n	8002cc0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f005 f91e 	bl	8007cfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 f9e3 	bl	8004eaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	687e      	ldr	r6, [r7, #4]
 8002aec:	466d      	mov	r5, sp
 8002aee:	f106 0410 	add.w	r4, r6, #16
 8002af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002afe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b02:	1d33      	adds	r3, r6, #4
 8002b04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b06:	6838      	ldr	r0, [r7, #0]
 8002b08:	f002 f8ba 	bl	8004c80 <USB_CoreInit>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e0d0      	b.n	8002cc0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 f9d1 	bl	8004ecc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
 8002b2e:	e04a      	b.n	8002bc6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	333d      	adds	r3, #61	; 0x3d
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	333c      	adds	r3, #60	; 0x3c
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	b298      	uxth	r0, r3
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3342      	adds	r3, #66	; 0x42
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	333f      	adds	r3, #63	; 0x3f
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3344      	adds	r3, #68	; 0x44
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3348      	adds	r3, #72	; 0x48
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	3350      	adds	r3, #80	; 0x50
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d3af      	bcc.n	8002b30 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	e044      	b.n	8002c60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3b5      	bcc.n	8002bd6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	687e      	ldr	r6, [r7, #4]
 8002c72:	466d      	mov	r5, sp
 8002c74:	f106 0410 	add.w	r4, r6, #16
 8002c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c84:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c88:	1d33      	adds	r3, r6, #4
 8002c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8c:	6838      	ldr	r0, [r7, #0]
 8002c8e:	f002 f947 	bl	8004f20 <USB_DevInit>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e00d      	b.n	8002cc0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 f93c 	bl	8005f36 <USB_DevDisconnect>

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_PCD_Start+0x1c>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e020      	b.n	8002d26 <HAL_PCD_Start+0x5e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d109      	bne.n	8002d08 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d005      	beq.n	8002d08 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 f8fa 	bl	8005f06 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f002 f8b6 	bl	8004e88 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d2e:	b590      	push	{r4, r7, lr}
 8002d30:	b08d      	sub	sp, #52	; 0x34
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f003 f9a1 	bl	800608c <USB_GetMode>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 838e 	bne.w	800346e <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 f905 	bl	8005f66 <USB_ReadInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8384 	beq.w	800346c <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f003 f8fc 	bl	8005f66 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d107      	bne.n	8002d88 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f002 0202 	and.w	r2, r2, #2
 8002d86:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f003 f8ea 	bl	8005f66 <USB_ReadInterrupts>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d9c:	d17b      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 f8f0 	bl	8005f8c <USB_ReadDevAllOutEpInterrupt>
 8002dac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002dae:	e06f      	b.n	8002e90 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d064      	beq.n	8002e84 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 f915 	bl	8005ff4 <USB_ReadDevOutEPInterrupt>
 8002dca:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00c      	beq.n	8002df0 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de2:	461a      	mov	r2, r3
 8002de4:	2301      	movs	r3, #1
 8002de6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fe0e 	bl	8003a0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00c      	beq.n	8002e14 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002dfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 ff0d 	bl	8003c1c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2308      	movs	r3, #8
 8002e12:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d015      	beq.n	8002e66 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d108      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2101      	movs	r1, #1
 8002e50:	f003 f960 	bl	8006114 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e60:	461a      	mov	r2, r3
 8002e62:	2320      	movs	r3, #32
 8002e64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	3301      	adds	r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d18c      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 f863 	bl	8005f66 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eaa:	f040 80c4 	bne.w	8003036 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 f884 	bl	8005fc0 <USB_ReadDevAllInEpInterrupt>
 8002eb8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ebe:	e0b6      	b.n	800302e <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80ab 	beq.w	8003022 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f003 f8aa 	bl	8006030 <USB_ReadDevInEPInterrupt>
 8002edc:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d05b      	beq.n	8002fa0 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	2201      	movs	r2, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69f9      	ldr	r1, [r7, #28]
 8002f04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f08:	4013      	ands	r3, r2
 8002f0a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d11b      	bne.n	8002f5e <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3348      	adds	r3, #72	; 0x48
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4403      	add	r3, r0
 8002f46:	3344      	adds	r3, #68	; 0x44
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4419      	add	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4403      	add	r3, r0
 8002f5a:	3348      	adds	r3, #72	; 0x48
 8002f5c:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f004 ff4a 	bl	8007dfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d116      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d113      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x272>
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	3350      	adds	r3, #80	; 0x50
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d108      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	f003 f8ba 	bl	8006114 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2308      	movs	r3, #8
 8002fba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2310      	movs	r3, #16
 8002fd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2340      	movs	r3, #64	; 0x40
 8002ff2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300a:	461a      	mov	r2, r3
 800300c:	2302      	movs	r3, #2
 800300e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800301a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fc67 	bl	80038f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	3301      	adds	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	f47f af45 	bne.w	8002ec0 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f002 ff93 	bl	8005f66 <USB_ReadInterrupts>
 8003040:	4603      	mov	r3, r0
 8003042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800304a:	d122      	bne.n	8003092 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003066:	2b01      	cmp	r3, #1
 8003068:	d108      	bne.n	800307c <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003072:	2100      	movs	r1, #0
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fe89 	bl	8003d8c <HAL_PCDEx_LPM_Callback>
 800307a:	e002      	b.n	8003082 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f004 ff35 	bl	8007eec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f002 ff65 	bl	8005f66 <USB_ReadInterrupts>
 800309c:	4603      	mov	r3, r0
 800309e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a6:	d112      	bne.n	80030ce <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d102      	bne.n	80030be <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f004 fef1 	bl	8007ea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030cc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 ff47 	bl	8005f66 <USB_ReadInterrupts>
 80030d8:	4603      	mov	r3, r0
 80030da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	f040 80a7 	bne.w	8003234 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2110      	movs	r1, #16
 8003100:	4618      	mov	r0, r3
 8003102:	f002 f87f 	bl	8005204 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003106:	2300      	movs	r3, #0
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800310a:	e036      	b.n	800317a <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003118:	461a      	mov	r2, r3
 800311a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800311e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003130:	0151      	lsls	r1, r2, #5
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	440a      	add	r2, r1
 8003136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800313a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800313e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314c:	461a      	mov	r2, r3
 800314e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003152:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003164:	0151      	lsls	r1, r2, #5
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	440a      	add	r2, r1
 800316a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800316e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003172:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	3301      	adds	r3, #1
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003180:	429a      	cmp	r2, r3
 8003182:	d3c3      	bcc.n	800310c <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003192:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003196:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b0:	f043 030b 	orr.w	r3, r3, #11
 80031b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c6:	f043 030b 	orr.w	r3, r3, #11
 80031ca:	6453      	str	r3, [r2, #68]	; 0x44
 80031cc:	e015      	b.n	80031fa <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031f4:	f043 030b 	orr.w	r3, r3, #11
 80031f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003208:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800320c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800321e:	461a      	mov	r2, r3
 8003220:	f002 ff78 	bl	8006114 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f002 fe94 	bl	8005f66 <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003248:	d124      	bne.n	8003294 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f002 ff2a 	bl	80060a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f002 f834 	bl	80052c6 <USB_GetDevSpeed>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681c      	ldr	r4, [r3, #0]
 800326a:	f001 f9c9 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 800326e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	4620      	mov	r0, r4
 800327a:	f001 fd63 	bl	8004d44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f004 fde5 	bl	8007e4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003292:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f002 fe64 	bl	8005f66 <USB_ReadInterrupts>
 800329e:	4603      	mov	r3, r0
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d161      	bne.n	800336c <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0210 	bic.w	r2, r2, #16
 80032b6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f003 020f 	and.w	r2, r3, #15
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	3304      	adds	r3, #4
 80032d6:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	0c5b      	lsrs	r3, r3, #17
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d124      	bne.n	800332e <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d035      	beq.n	800335c <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6a38      	ldr	r0, [r7, #32]
 8003304:	f002 fcdc 	bl	8005cc0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003314:	441a      	add	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003326:	441a      	add	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	619a      	str	r2, [r3, #24]
 800332c:	e016      	b.n	800335c <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	0c5b      	lsrs	r3, r3, #17
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	2b06      	cmp	r3, #6
 8003338:	d110      	bne.n	800335c <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003340:	2208      	movs	r2, #8
 8003342:	4619      	mov	r1, r3
 8003344:	6a38      	ldr	r0, [r7, #32]
 8003346:	f002 fcbb 	bl	8005cc0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003356:	441a      	add	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0210 	orr.w	r2, r2, #16
 800336a:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f002 fdf8 	bl	8005f66 <USB_ReadInterrupts>
 8003376:	4603      	mov	r3, r0
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b08      	cmp	r3, #8
 800337e:	d10a      	bne.n	8003396 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f004 fd56 	bl	8007e32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f002 0208 	and.w	r2, r2, #8
 8003394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f002 fde3 	bl	8005f66 <USB_ReadInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033aa:	d10f      	bne.n	80033cc <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f004 fdb8 	bl	8007f2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f002 fdc8 	bl	8005f66 <USB_ReadInterrupts>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033e0:	d10f      	bne.n	8003402 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	4619      	mov	r1, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f004 fd8b 	bl	8007f08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003400:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f002 fdad 	bl	8005f66 <USB_ReadInterrupts>
 800340c:	4603      	mov	r3, r0
 800340e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003416:	d10a      	bne.n	800342e <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f004 fd99 	bl	8007f50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800342c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f002 fd97 	bl	8005f66 <USB_ReadInterrupts>
 8003438:	4603      	mov	r3, r0
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b04      	cmp	r3, #4
 8003440:	d115      	bne.n	800346e <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f004 fd89 	bl	8007f6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	e000      	b.n	800346e <HAL_PCD_IRQHandler+0x740>
      return;
 800346c:	bf00      	nop
    }
  }
}
 800346e:	3734      	adds	r7, #52	; 0x34
 8003470:	46bd      	mov	sp, r7
 8003472:	bd90      	pop	{r4, r7, pc}

08003474 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_PCD_SetAddress+0x1a>
 800348a:	2302      	movs	r3, #2
 800348c:	e013      	b.n	80034b6 <HAL_PCD_SetAddress+0x42>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 fd07 	bl	8005eba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	4608      	mov	r0, r1
 80034c8:	4611      	mov	r1, r2
 80034ca:	461a      	mov	r2, r3
 80034cc:	4603      	mov	r3, r0
 80034ce:	70fb      	strb	r3, [r7, #3]
 80034d0:	460b      	mov	r3, r1
 80034d2:	803b      	strh	r3, [r7, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	da0f      	bge.n	8003504 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	3338      	adds	r3, #56	; 0x38
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	3304      	adds	r3, #4
 80034fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	705a      	strb	r2, [r3, #1]
 8003502:	e00f      	b.n	8003524 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	3304      	adds	r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	b2da      	uxtb	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003530:	883a      	ldrh	r2, [r7, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	78ba      	ldrb	r2, [r7, #2]
 800353a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	785b      	ldrb	r3, [r3, #1]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d004      	beq.n	800354e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800354e:	78bb      	ldrb	r3, [r7, #2]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d102      	bne.n	800355a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_PCD_EP_Open+0xaa>
 8003564:	2302      	movs	r3, #2
 8003566:	e00e      	b.n	8003586 <HAL_PCD_EP_Open+0xc8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68f9      	ldr	r1, [r7, #12]
 8003576:	4618      	mov	r0, r3
 8003578:	f001 feca 	bl	8005310 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003584:	7afb      	ldrb	r3, [r7, #11]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800359a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	da0f      	bge.n	80035c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	f003 020f 	and.w	r2, r3, #15
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	3338      	adds	r3, #56	; 0x38
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	3304      	adds	r3, #4
 80035b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	705a      	strb	r2, [r3, #1]
 80035c0:	e00f      	b.n	80035e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	3304      	adds	r3, #4
 80035da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_PCD_EP_Close+0x6e>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e00e      	b.n	800361a <HAL_PCD_EP_Close+0x8c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68f9      	ldr	r1, [r7, #12]
 800360a:	4618      	mov	r0, r3
 800360c:	f001 ff08 	bl	8005420 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b086      	sub	sp, #24
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	460b      	mov	r3, r1
 8003630:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003632:	7afb      	ldrb	r3, [r7, #11]
 8003634:	f003 020f 	and.w	r2, r3, #15
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	3304      	adds	r3, #4
 800364a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2200      	movs	r2, #0
 8003662:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003664:	7afb      	ldrb	r3, [r7, #11]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	b2da      	uxtb	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d102      	bne.n	800367e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800367e:	7afb      	ldrb	r3, [r7, #11]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	6979      	ldr	r1, [r7, #20]
 8003696:	f002 f98b 	bl	80059b0 <USB_EP0StartXfer>
 800369a:	e008      	b.n	80036ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	6979      	ldr	r1, [r7, #20]
 80036aa:	f001 ff3d 	bl	8005528 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	f003 020f 	and.w	r2, r3, #15
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	460b      	mov	r3, r1
 80036f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f8:	7afb      	ldrb	r3, [r7, #11]
 80036fa:	f003 020f 	and.w	r2, r3, #15
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	3338      	adds	r3, #56	; 0x38
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	3304      	adds	r3, #4
 800370e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2200      	movs	r2, #0
 8003720:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2201      	movs	r2, #1
 8003726:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003728:	7afb      	ldrb	r3, [r7, #11]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	b2da      	uxtb	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003742:	7afb      	ldrb	r3, [r7, #11]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	6979      	ldr	r1, [r7, #20]
 800375a:	f002 f929 	bl	80059b0 <USB_EP0StartXfer>
 800375e:	e008      	b.n	8003772 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	6979      	ldr	r1, [r7, #20]
 800376e:	f001 fedb 	bl	8005528 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	f003 020f 	and.w	r2, r3, #15
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	d901      	bls.n	800379a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e050      	b.n	800383c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800379a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	da0f      	bge.n	80037c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 020f 	and.w	r2, r3, #15
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	3338      	adds	r3, #56	; 0x38
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	3304      	adds	r3, #4
 80037b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	705a      	strb	r2, [r3, #1]
 80037c0:	e00d      	b.n	80037de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	3304      	adds	r3, #4
 80037d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_PCD_EP_SetStall+0x82>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e01e      	b.n	800383c <HAL_PCD_EP_SetStall+0xc0>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68f9      	ldr	r1, [r7, #12]
 800380c:	4618      	mov	r0, r3
 800380e:	f002 fa80 	bl	8005d12 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	b2d9      	uxtb	r1, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800382c:	461a      	mov	r2, r3
 800382e:	f002 fc71 	bl	8006114 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	f003 020f 	and.w	r2, r3, #15
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	429a      	cmp	r2, r3
 800385c:	d901      	bls.n	8003862 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e042      	b.n	80038e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003862:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003866:	2b00      	cmp	r3, #0
 8003868:	da0f      	bge.n	800388a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 020f 	and.w	r2, r3, #15
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	3338      	adds	r3, #56	; 0x38
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	3304      	adds	r3, #4
 8003880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	705a      	strb	r2, [r3, #1]
 8003888:	e00f      	b.n	80038aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	f003 020f 	and.w	r2, r3, #15
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	3304      	adds	r3, #4
 80038a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_PCD_EP_ClrStall+0x86>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e00e      	b.n	80038e8 <HAL_PCD_EP_ClrStall+0xa4>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68f9      	ldr	r1, [r7, #12]
 80038d8:	4618      	mov	r0, r3
 80038da:	f002 fa88 	bl	8005dee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	3338      	adds	r3, #56	; 0x38
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4413      	add	r3, r2
 8003914:	3304      	adds	r3, #4
 8003916:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	429a      	cmp	r2, r3
 8003922:	d901      	bls.n	8003928 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e06c      	b.n	8003a02 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	429a      	cmp	r2, r3
 800393c:	d902      	bls.n	8003944 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	3303      	adds	r3, #3
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800394c:	e02b      	b.n	80039a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	429a      	cmp	r2, r3
 8003962:	d902      	bls.n	800396a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3303      	adds	r3, #3
 800396e:	089b      	lsrs	r3, r3, #2
 8003970:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68d9      	ldr	r1, [r3, #12]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003982:	b2db      	uxtb	r3, r3
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	4603      	mov	r3, r0
 8003988:	6978      	ldr	r0, [r7, #20]
 800398a:	f002 f964 	bl	8005c56 <USB_WritePacket>

    ep->xfer_buff  += len;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	441a      	add	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	441a      	add	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d809      	bhi.n	80039d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d203      	bcs.n	80039d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1be      	bne.n	800394e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d811      	bhi.n	8003a00 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	2201      	movs	r2, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	6939      	ldr	r1, [r7, #16]
 80039f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039fc:	4013      	ands	r3, r2
 80039fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	333c      	adds	r3, #60	; 0x3c
 8003a24:	3304      	adds	r3, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	f040 80b3 	bne.w	8003baa <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d028      	beq.n	8003aa0 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a70      	ldr	r2, [pc, #448]	; (8003c14 <PCD_EP_OutXfrComplete_int+0x208>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d90e      	bls.n	8003a74 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a72:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f004 f995 	bl	8007da4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a84:	461a      	mov	r2, r3
 8003a86:	2101      	movs	r1, #1
 8003a88:	f002 fb44 	bl	8006114 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	6093      	str	r3, [r2, #8]
 8003a9e:	e0b3      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2320      	movs	r3, #32
 8003aba:	6093      	str	r3, [r2, #8]
 8003abc:	e0a4      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f040 809f 	bne.w	8003c08 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a51      	ldr	r2, [pc, #324]	; (8003c14 <PCD_EP_OutXfrComplete_int+0x208>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d90f      	bls.n	8003af2 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aee:	6093      	str	r3, [r2, #8]
 8003af0:	e08a      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	4613      	mov	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b04:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	0159      	lsls	r1, r3, #5
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	440b      	add	r3, r1
 8003b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003b18:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4403      	add	r3, r0
 8003b28:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b2c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b40:	6819      	ldr	r1, [r3, #0]
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4403      	add	r3, r0
 8003b50:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4419      	add	r1, r3
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4403      	add	r3, r0
 8003b66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b6a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f004 f928 	bl	8007dc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d144      	bne.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1fc>
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d138      	bne.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	f002 fab6 	bl	8006114 <USB_EP0_OutStart>
 8003ba8:	e02e      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a1a      	ldr	r2, [pc, #104]	; (8003c18 <PCD_EP_OutXfrComplete_int+0x20c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d124      	bne.n	8003bfc <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bce:	6093      	str	r3, [r2, #8]
 8003bd0:	e01a      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be8:	461a      	mov	r2, r3
 8003bea:	2320      	movs	r3, #32
 8003bec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f004 f8e7 	bl	8007dc8 <HAL_PCD_DataOutStageCallback>
 8003bfa:	e005      	b.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	4619      	mov	r1, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f004 f8e0 	bl	8007dc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	4f54300a 	.word	0x4f54300a
 8003c18:	4f54310a 	.word	0x4f54310a

08003c1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	333c      	adds	r3, #60	; 0x3c
 8003c34:	3304      	adds	r3, #4
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d113      	bne.n	8003c7a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d922      	bls.n	8003ca0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01d      	beq.n	8003ca0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c70:	461a      	mov	r2, r3
 8003c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c76:	6093      	str	r3, [r2, #8]
 8003c78:	e012      	b.n	8003ca0 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <PCD_EP_OutSetupPacket_int+0xbc>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d10e      	bne.n	8003ca0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d009      	beq.n	8003ca0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f004 f87f 	bl	8007da4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d90c      	bls.n	8003cc8 <PCD_EP_OutSetupPacket_int+0xac>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d108      	bne.n	8003cc8 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	f002 fa26 	bl	8006114 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	4f54300a 	.word	0x4f54300a
 8003cd8:	4f54310a 	.word	0x4f54310a

08003cdc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003cfa:	883b      	ldrh	r3, [r7, #0]
 8003cfc:	0419      	lsls	r1, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
 8003d08:	e028      	b.n	8003d5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	4413      	add	r3, r2
 8003d16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	73fb      	strb	r3, [r7, #15]
 8003d1c:	e00d      	b.n	8003d3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	3340      	adds	r3, #64	; 0x40
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	3301      	adds	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d3ec      	bcc.n	8003d1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d44:	883b      	ldrh	r3, [r7, #0]
 8003d46:	0418      	lsls	r0, r3, #16
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6819      	ldr	r1, [r3, #0]
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	4302      	orrs	r2, r0
 8003d54:	3340      	adds	r3, #64	; 0x40
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e25b      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d075      	beq.n	8003eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dc2:	4ba3      	ldr	r3, [pc, #652]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d00c      	beq.n	8003de8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dce:	4ba0      	ldr	r3, [pc, #640]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d112      	bne.n	8003e00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dda:	4b9d      	ldr	r3, [pc, #628]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de6:	d10b      	bne.n	8003e00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	4b99      	ldr	r3, [pc, #612]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d05b      	beq.n	8003eac <HAL_RCC_OscConfig+0x108>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d157      	bne.n	8003eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e236      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d106      	bne.n	8003e18 <HAL_RCC_OscConfig+0x74>
 8003e0a:	4b91      	ldr	r3, [pc, #580]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a90      	ldr	r2, [pc, #576]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e01d      	b.n	8003e54 <HAL_RCC_OscConfig+0xb0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x98>
 8003e22:	4b8b      	ldr	r3, [pc, #556]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a8a      	ldr	r2, [pc, #552]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	4b88      	ldr	r3, [pc, #544]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a87      	ldr	r2, [pc, #540]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e00b      	b.n	8003e54 <HAL_RCC_OscConfig+0xb0>
 8003e3c:	4b84      	ldr	r3, [pc, #528]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a83      	ldr	r2, [pc, #524]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	4b81      	ldr	r3, [pc, #516]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a80      	ldr	r2, [pc, #512]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d013      	beq.n	8003e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fec0 	bl	8001be0 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e64:	f7fd febc 	bl	8001be0 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	; 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1fb      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	4b76      	ldr	r3, [pc, #472]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0xc0>
 8003e82:	e014      	b.n	8003eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fd feac 	bl	8001be0 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e8c:	f7fd fea8 	bl	8001be0 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e1e7      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	4b6c      	ldr	r3, [pc, #432]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0xe8>
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d063      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eba:	4b65      	ldr	r3, [pc, #404]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec6:	4b62      	ldr	r3, [pc, #392]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d11c      	bne.n	8003f0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b5f      	ldr	r3, [pc, #380]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d116      	bne.n	8003f0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ede:	4b5c      	ldr	r3, [pc, #368]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x152>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e1bb      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef6:	4b56      	ldr	r3, [pc, #344]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4952      	ldr	r1, [pc, #328]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	e03a      	b.n	8003f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d020      	beq.n	8003f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f14:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <HAL_RCC_OscConfig+0x2b0>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fd fe61 	bl	8001be0 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f22:	f7fd fe5d 	bl	8001be0 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e19c      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	4b46      	ldr	r3, [pc, #280]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f40:	4b43      	ldr	r3, [pc, #268]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4940      	ldr	r1, [pc, #256]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	600b      	str	r3, [r1, #0]
 8003f54:	e015      	b.n	8003f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f56:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <HAL_RCC_OscConfig+0x2b0>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fd fe40 	bl	8001be0 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f64:	f7fd fe3c 	bl	8001be0 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e17b      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d030      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f96:	4b30      	ldr	r3, [pc, #192]	; (8004058 <HAL_RCC_OscConfig+0x2b4>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fd fe20 	bl	8001be0 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa4:	f7fd fe1c 	bl	8001be0 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e15b      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	4b26      	ldr	r3, [pc, #152]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x200>
 8003fc2:	e015      	b.n	8003ff0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc4:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_OscConfig+0x2b4>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fca:	f7fd fe09 	bl	8001be0 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd2:	f7fd fe05 	bl	8001be0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e144      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80a0 	beq.w	800413e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004002:	4b13      	ldr	r3, [pc, #76]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10f      	bne.n	800402e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401c:	6413      	str	r3, [r2, #64]	; 0x40
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402a:	2301      	movs	r3, #1
 800402c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_OscConfig+0x2b8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d121      	bne.n	800407e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_RCC_OscConfig+0x2b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a07      	ldr	r2, [pc, #28]	; (800405c <HAL_RCC_OscConfig+0x2b8>)
 8004040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004046:	f7fd fdcb 	bl	8001be0 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	e011      	b.n	8004072 <HAL_RCC_OscConfig+0x2ce>
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800
 8004054:	42470000 	.word	0x42470000
 8004058:	42470e80 	.word	0x42470e80
 800405c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004060:	f7fd fdbe 	bl	8001be0 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0fd      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	4b81      	ldr	r3, [pc, #516]	; (8004278 <HAL_RCC_OscConfig+0x4d4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d106      	bne.n	8004094 <HAL_RCC_OscConfig+0x2f0>
 8004086:	4b7d      	ldr	r3, [pc, #500]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	4a7c      	ldr	r2, [pc, #496]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	6713      	str	r3, [r2, #112]	; 0x70
 8004092:	e01c      	b.n	80040ce <HAL_RCC_OscConfig+0x32a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b05      	cmp	r3, #5
 800409a:	d10c      	bne.n	80040b6 <HAL_RCC_OscConfig+0x312>
 800409c:	4b77      	ldr	r3, [pc, #476]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	4a76      	ldr	r2, [pc, #472]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040a2:	f043 0304 	orr.w	r3, r3, #4
 80040a6:	6713      	str	r3, [r2, #112]	; 0x70
 80040a8:	4b74      	ldr	r3, [pc, #464]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	4a73      	ldr	r2, [pc, #460]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6713      	str	r3, [r2, #112]	; 0x70
 80040b4:	e00b      	b.n	80040ce <HAL_RCC_OscConfig+0x32a>
 80040b6:	4b71      	ldr	r3, [pc, #452]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a70      	ldr	r2, [pc, #448]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
 80040c2:	4b6e      	ldr	r3, [pc, #440]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a6d      	ldr	r2, [pc, #436]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040c8:	f023 0304 	bic.w	r3, r3, #4
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d015      	beq.n	8004102 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d6:	f7fd fd83 	bl	8001be0 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fd fd7f 	bl	8001be0 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e0bc      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f4:	4b61      	ldr	r3, [pc, #388]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ee      	beq.n	80040de <HAL_RCC_OscConfig+0x33a>
 8004100:	e014      	b.n	800412c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004102:	f7fd fd6d 	bl	8001be0 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fd fd69 	bl	8001be0 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0a6      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004120:	4b56      	ldr	r3, [pc, #344]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ee      	bne.n	800410a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d105      	bne.n	800413e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004132:	4b52      	ldr	r3, [pc, #328]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	4a51      	ldr	r2, [pc, #324]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 8004138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8092 	beq.w	800426c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004148:	4b4c      	ldr	r3, [pc, #304]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b08      	cmp	r3, #8
 8004152:	d05c      	beq.n	800420e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d141      	bne.n	80041e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415c:	4b48      	ldr	r3, [pc, #288]	; (8004280 <HAL_RCC_OscConfig+0x4dc>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004162:	f7fd fd3d 	bl	8001be0 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416a:	f7fd fd39 	bl	8001be0 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e078      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417c:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f0      	bne.n	800416a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	019b      	lsls	r3, r3, #6
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	3b01      	subs	r3, #1
 80041a2:	041b      	lsls	r3, r3, #16
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	061b      	lsls	r3, r3, #24
 80041ac:	4933      	ldr	r1, [pc, #204]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b2:	4b33      	ldr	r3, [pc, #204]	; (8004280 <HAL_RCC_OscConfig+0x4dc>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fd fd12 	bl	8001be0 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fd fd0e 	bl	8001be0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e04d      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d2:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x41c>
 80041de:	e045      	b.n	800426c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e0:	4b27      	ldr	r3, [pc, #156]	; (8004280 <HAL_RCC_OscConfig+0x4dc>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7fd fcfb 	bl	8001be0 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fd fcf7 	bl	8001be0 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e036      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004200:	4b1e      	ldr	r3, [pc, #120]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f0      	bne.n	80041ee <HAL_RCC_OscConfig+0x44a>
 800420c:	e02e      	b.n	800426c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e029      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800421a:	4b18      	ldr	r3, [pc, #96]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	429a      	cmp	r2, r3
 800422c:	d11c      	bne.n	8004268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d115      	bne.n	8004268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004242:	4013      	ands	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004248:	4293      	cmp	r3, r2
 800424a:	d10d      	bne.n	8004268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d106      	bne.n	8004268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40007000 	.word	0x40007000
 800427c:	40023800 	.word	0x40023800
 8004280:	42470060 	.word	0x42470060

08004284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0cc      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004298:	4b68      	ldr	r3, [pc, #416]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d90c      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b65      	ldr	r3, [pc, #404]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b63      	ldr	r3, [pc, #396]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0b8      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d8:	4b59      	ldr	r3, [pc, #356]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a58      	ldr	r2, [pc, #352]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f0:	4b53      	ldr	r3, [pc, #332]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4a52      	ldr	r2, [pc, #328]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b50      	ldr	r3, [pc, #320]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	494d      	ldr	r1, [pc, #308]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d044      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b47      	ldr	r3, [pc, #284]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d119      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e07f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d003      	beq.n	8004342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433e:	2b03      	cmp	r3, #3
 8004340:	d107      	bne.n	8004352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004342:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e06f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004352:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e067      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004362:	4b37      	ldr	r3, [pc, #220]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4934      	ldr	r1, [pc, #208]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	4313      	orrs	r3, r2
 8004372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004374:	f7fd fc34 	bl	8001be0 <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	e00a      	b.n	8004392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437c:	f7fd fc30 	bl	8001be0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e04f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004392:	4b2b      	ldr	r3, [pc, #172]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 020c 	and.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1eb      	bne.n	800437c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d20c      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b20      	ldr	r3, [pc, #128]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e032      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4916      	ldr	r1, [pc, #88]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	490e      	ldr	r1, [pc, #56]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800440a:	f000 f821 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800440e:	4601      	mov	r1, r0
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x1c0>)
 800441c:	5cd3      	ldrb	r3, [r2, r3]
 800441e:	fa21 f303 	lsr.w	r3, r1, r3
 8004422:	4a09      	ldr	r2, [pc, #36]	; (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd fb94 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023c00 	.word	0x40023c00
 8004440:	40023800 	.word	0x40023800
 8004444:	080085b0 	.word	0x080085b0
 8004448:	20000000 	.word	0x20000000
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	2300      	movs	r3, #0
 8004460:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b04      	cmp	r3, #4
 8004470:	d007      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x32>
 8004472:	2b08      	cmp	r3, #8
 8004474:	d008      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0x38>
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 80b4 	bne.w	80045e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b5e      	ldr	r3, [pc, #376]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800447e:	60bb      	str	r3, [r7, #8]
       break;
 8004480:	e0b3      	b.n	80045ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004482:	4b5e      	ldr	r3, [pc, #376]	; (80045fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004484:	60bb      	str	r3, [r7, #8]
      break;
 8004486:	e0b0      	b.n	80045ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004488:	4b5a      	ldr	r3, [pc, #360]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004490:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004492:	4b58      	ldr	r3, [pc, #352]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d04a      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449e:	4b55      	ldr	r3, [pc, #340]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	f04f 0400 	mov.w	r4, #0
 80044a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	ea03 0501 	and.w	r5, r3, r1
 80044b4:	ea04 0602 	and.w	r6, r4, r2
 80044b8:	4629      	mov	r1, r5
 80044ba:	4632      	mov	r2, r6
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	f04f 0400 	mov.w	r4, #0
 80044c4:	0154      	lsls	r4, r2, #5
 80044c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044ca:	014b      	lsls	r3, r1, #5
 80044cc:	4619      	mov	r1, r3
 80044ce:	4622      	mov	r2, r4
 80044d0:	1b49      	subs	r1, r1, r5
 80044d2:	eb62 0206 	sbc.w	r2, r2, r6
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	f04f 0400 	mov.w	r4, #0
 80044de:	0194      	lsls	r4, r2, #6
 80044e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044e4:	018b      	lsls	r3, r1, #6
 80044e6:	1a5b      	subs	r3, r3, r1
 80044e8:	eb64 0402 	sbc.w	r4, r4, r2
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	00e2      	lsls	r2, r4, #3
 80044f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044fa:	00d9      	lsls	r1, r3, #3
 80044fc:	460b      	mov	r3, r1
 80044fe:	4614      	mov	r4, r2
 8004500:	195b      	adds	r3, r3, r5
 8004502:	eb44 0406 	adc.w	r4, r4, r6
 8004506:	f04f 0100 	mov.w	r1, #0
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	0262      	lsls	r2, r4, #9
 8004510:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004514:	0259      	lsls	r1, r3, #9
 8004516:	460b      	mov	r3, r1
 8004518:	4614      	mov	r4, r2
 800451a:	4618      	mov	r0, r3
 800451c:	4621      	mov	r1, r4
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f04f 0400 	mov.w	r4, #0
 8004524:	461a      	mov	r2, r3
 8004526:	4623      	mov	r3, r4
 8004528:	f7fc fa44 	bl	80009b4 <__aeabi_uldivmod>
 800452c:	4603      	mov	r3, r0
 800452e:	460c      	mov	r4, r1
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e049      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004534:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	f04f 0400 	mov.w	r4, #0
 800453e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	ea03 0501 	and.w	r5, r3, r1
 800454a:	ea04 0602 	and.w	r6, r4, r2
 800454e:	4629      	mov	r1, r5
 8004550:	4632      	mov	r2, r6
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	f04f 0400 	mov.w	r4, #0
 800455a:	0154      	lsls	r4, r2, #5
 800455c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004560:	014b      	lsls	r3, r1, #5
 8004562:	4619      	mov	r1, r3
 8004564:	4622      	mov	r2, r4
 8004566:	1b49      	subs	r1, r1, r5
 8004568:	eb62 0206 	sbc.w	r2, r2, r6
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	f04f 0400 	mov.w	r4, #0
 8004574:	0194      	lsls	r4, r2, #6
 8004576:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800457a:	018b      	lsls	r3, r1, #6
 800457c:	1a5b      	subs	r3, r3, r1
 800457e:	eb64 0402 	sbc.w	r4, r4, r2
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	00e2      	lsls	r2, r4, #3
 800458c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004590:	00d9      	lsls	r1, r3, #3
 8004592:	460b      	mov	r3, r1
 8004594:	4614      	mov	r4, r2
 8004596:	195b      	adds	r3, r3, r5
 8004598:	eb44 0406 	adc.w	r4, r4, r6
 800459c:	f04f 0100 	mov.w	r1, #0
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	02a2      	lsls	r2, r4, #10
 80045a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045aa:	0299      	lsls	r1, r3, #10
 80045ac:	460b      	mov	r3, r1
 80045ae:	4614      	mov	r4, r2
 80045b0:	4618      	mov	r0, r3
 80045b2:	4621      	mov	r1, r4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f04f 0400 	mov.w	r4, #0
 80045ba:	461a      	mov	r2, r3
 80045bc:	4623      	mov	r3, r4
 80045be:	f7fc f9f9 	bl	80009b4 <__aeabi_uldivmod>
 80045c2:	4603      	mov	r3, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	3301      	adds	r3, #1
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e0:	60bb      	str	r3, [r7, #8]
      break;
 80045e2:	e002      	b.n	80045ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e4:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045e6:	60bb      	str	r3, [r7, #8]
      break;
 80045e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ea:	68bb      	ldr	r3, [r7, #8]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f4:	40023800 	.word	0x40023800
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	007a1200 	.word	0x007a1200

08004600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_RCC_GetHCLKFreq+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000000 	.word	0x20000000

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800461c:	f7ff fff0 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004620:	4601      	mov	r1, r0
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	0a9b      	lsrs	r3, r3, #10
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4a03      	ldr	r2, [pc, #12]	; (800463c <HAL_RCC_GetPCLK1Freq+0x24>)
 800462e:	5cd3      	ldrb	r3, [r2, r3]
 8004630:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	080085c0 	.word	0x080085c0

08004640 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e056      	b.n	8004700 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d106      	bne.n	8004672 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7fd f8d9 	bl	8001824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004688:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	ea42 0103 	orr.w	r1, r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	0c1b      	lsrs	r3, r3, #16
 80046d0:	f003 0104 	and.w	r1, r3, #4
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69da      	ldr	r2, [r3, #28]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e01d      	b.n	8004756 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fd f8c0 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	4619      	mov	r1, r3
 8004746:	4610      	mov	r0, r2
 8004748:	f000 f8e4 	bl	8004914 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b06      	cmp	r3, #6
 800477e:	d007      	beq.n	8004790 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_TIM_ConfigClockSource+0x18>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e0a6      	b.n	800490c <HAL_TIM_ConfigClockSource+0x166>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047e4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d067      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0x120>
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d80b      	bhi.n	8004812 <HAL_TIM_ConfigClockSource+0x6c>
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d073      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x140>
 80047fe:	2b10      	cmp	r3, #16
 8004800:	d802      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x62>
 8004802:	2b00      	cmp	r3, #0
 8004804:	d06f      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004806:	e078      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004808:	2b20      	cmp	r3, #32
 800480a:	d06c      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x140>
 800480c:	2b30      	cmp	r3, #48	; 0x30
 800480e:	d06a      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004810:	e073      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004812:	2b70      	cmp	r3, #112	; 0x70
 8004814:	d00d      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x8c>
 8004816:	2b70      	cmp	r3, #112	; 0x70
 8004818:	d804      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x7e>
 800481a:	2b50      	cmp	r3, #80	; 0x50
 800481c:	d033      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0xe0>
 800481e:	2b60      	cmp	r3, #96	; 0x60
 8004820:	d041      	beq.n	80048a6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004822:	e06a      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004828:	d066      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x152>
 800482a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482e:	d017      	beq.n	8004860 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004830:	e063      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6899      	ldr	r1, [r3, #8]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f000 f981 	bl	8004b48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004854:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	609a      	str	r2, [r3, #8]
      break;
 800485e:	e04c      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	6899      	ldr	r1, [r3, #8]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f000 f96a 	bl	8004b48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004882:	609a      	str	r2, [r3, #8]
      break;
 8004884:	e039      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6859      	ldr	r1, [r3, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	461a      	mov	r2, r3
 8004894:	f000 f8de 	bl	8004a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2150      	movs	r1, #80	; 0x50
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f937 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 80048a4:	e029      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6859      	ldr	r1, [r3, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f000 f8fd 	bl	8004ab2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2160      	movs	r1, #96	; 0x60
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f927 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 80048c4:	e019      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6859      	ldr	r1, [r3, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f000 f8be 	bl	8004a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2140      	movs	r1, #64	; 0x40
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f917 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 80048e4:	e009      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4619      	mov	r1, r3
 80048f0:	4610      	mov	r0, r2
 80048f2:	f000 f90e 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 80048f6:	e000      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x154>
      break;
 80048f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a40      	ldr	r2, [pc, #256]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d013      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004932:	d00f      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a3d      	ldr	r2, [pc, #244]	; (8004a2c <TIM_Base_SetConfig+0x118>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a3c      	ldr	r2, [pc, #240]	; (8004a30 <TIM_Base_SetConfig+0x11c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a3b      	ldr	r2, [pc, #236]	; (8004a34 <TIM_Base_SetConfig+0x120>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3a      	ldr	r2, [pc, #232]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d108      	bne.n	8004966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d02b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004974:	d027      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <TIM_Base_SetConfig+0x118>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d023      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2b      	ldr	r2, [pc, #172]	; (8004a30 <TIM_Base_SetConfig+0x11c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01f      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <TIM_Base_SetConfig+0x120>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d017      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a28      	ldr	r2, [pc, #160]	; (8004a3c <TIM_Base_SetConfig+0x128>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a27      	ldr	r2, [pc, #156]	; (8004a40 <TIM_Base_SetConfig+0x12c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00f      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a26      	ldr	r2, [pc, #152]	; (8004a44 <TIM_Base_SetConfig+0x130>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a25      	ldr	r2, [pc, #148]	; (8004a48 <TIM_Base_SetConfig+0x134>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <TIM_Base_SetConfig+0x138>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a23      	ldr	r2, [pc, #140]	; (8004a50 <TIM_Base_SetConfig+0x13c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d108      	bne.n	80049d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0xf8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a0c      	ldr	r2, [pc, #48]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d103      	bne.n	8004a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	615a      	str	r2, [r3, #20]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40000c00 	.word	0x40000c00
 8004a38:	40010400 	.word	0x40010400
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800
 8004a48:	40001800 	.word	0x40001800
 8004a4c:	40001c00 	.word	0x40001c00
 8004a50:	40002000 	.word	0x40002000

08004a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0201 	bic.w	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 030a 	bic.w	r3, r3, #10
 8004a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b087      	sub	sp, #28
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0210 	bic.w	r2, r3, #16
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	031b      	lsls	r3, r3, #12
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f043 0307 	orr.w	r3, r3, #7
 8004b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	021a      	lsls	r2, r3, #8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e05a      	b.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d022      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bec:	d01d      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1d      	ldr	r2, [pc, #116]	; (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d018      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1b      	ldr	r2, [pc, #108]	; (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1a      	ldr	r2, [pc, #104]	; (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a18      	ldr	r2, [pc, #96]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d10c      	bne.n	8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40010400 	.word	0x40010400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40001800 	.word	0x40001800

08004c80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c80:	b084      	sub	sp, #16
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	f107 001c 	add.w	r0, r7, #28
 8004c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d122      	bne.n	8004cde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d105      	bne.n	8004cd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 fa7c 	bl	80061d0 <USB_CoreReset>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	e01a      	b.n	8004d14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f001 fa70 	bl	80061d0 <USB_CoreReset>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	639a      	str	r2, [r3, #56]	; 0x38
 8004d06:	e005      	b.n	8004d14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d10b      	bne.n	8004d32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f043 0206 	orr.w	r2, r3, #6
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d3e:	b004      	add	sp, #16
 8004d40:	4770      	bx	lr
	...

08004d44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d165      	bne.n	8004e24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4a41      	ldr	r2, [pc, #260]	; (8004e60 <USB_SetTurnaroundTime+0x11c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d906      	bls.n	8004d6e <USB_SetTurnaroundTime+0x2a>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4a40      	ldr	r2, [pc, #256]	; (8004e64 <USB_SetTurnaroundTime+0x120>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d802      	bhi.n	8004d6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d68:	230f      	movs	r3, #15
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e062      	b.n	8004e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4a3c      	ldr	r2, [pc, #240]	; (8004e64 <USB_SetTurnaroundTime+0x120>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d906      	bls.n	8004d84 <USB_SetTurnaroundTime+0x40>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4a3b      	ldr	r2, [pc, #236]	; (8004e68 <USB_SetTurnaroundTime+0x124>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d802      	bhi.n	8004d84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d7e:	230e      	movs	r3, #14
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e057      	b.n	8004e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4a38      	ldr	r2, [pc, #224]	; (8004e68 <USB_SetTurnaroundTime+0x124>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d906      	bls.n	8004d9a <USB_SetTurnaroundTime+0x56>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4a37      	ldr	r2, [pc, #220]	; (8004e6c <USB_SetTurnaroundTime+0x128>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d802      	bhi.n	8004d9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d94:	230d      	movs	r3, #13
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e04c      	b.n	8004e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4a33      	ldr	r2, [pc, #204]	; (8004e6c <USB_SetTurnaroundTime+0x128>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d906      	bls.n	8004db0 <USB_SetTurnaroundTime+0x6c>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4a32      	ldr	r2, [pc, #200]	; (8004e70 <USB_SetTurnaroundTime+0x12c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d802      	bhi.n	8004db0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004daa:	230c      	movs	r3, #12
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e041      	b.n	8004e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4a2f      	ldr	r2, [pc, #188]	; (8004e70 <USB_SetTurnaroundTime+0x12c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d906      	bls.n	8004dc6 <USB_SetTurnaroundTime+0x82>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4a2e      	ldr	r2, [pc, #184]	; (8004e74 <USB_SetTurnaroundTime+0x130>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d802      	bhi.n	8004dc6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004dc0:	230b      	movs	r3, #11
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e036      	b.n	8004e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <USB_SetTurnaroundTime+0x130>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d906      	bls.n	8004ddc <USB_SetTurnaroundTime+0x98>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4a29      	ldr	r2, [pc, #164]	; (8004e78 <USB_SetTurnaroundTime+0x134>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d802      	bhi.n	8004ddc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004dd6:	230a      	movs	r3, #10
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e02b      	b.n	8004e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4a26      	ldr	r2, [pc, #152]	; (8004e78 <USB_SetTurnaroundTime+0x134>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d906      	bls.n	8004df2 <USB_SetTurnaroundTime+0xae>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <USB_SetTurnaroundTime+0x138>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d802      	bhi.n	8004df2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004dec:	2309      	movs	r3, #9
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e020      	b.n	8004e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4a21      	ldr	r2, [pc, #132]	; (8004e7c <USB_SetTurnaroundTime+0x138>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d906      	bls.n	8004e08 <USB_SetTurnaroundTime+0xc4>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4a20      	ldr	r2, [pc, #128]	; (8004e80 <USB_SetTurnaroundTime+0x13c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d802      	bhi.n	8004e08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e02:	2308      	movs	r3, #8
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	e015      	b.n	8004e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <USB_SetTurnaroundTime+0x13c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d906      	bls.n	8004e1e <USB_SetTurnaroundTime+0xda>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <USB_SetTurnaroundTime+0x140>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d802      	bhi.n	8004e1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e18:	2307      	movs	r3, #7
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e00a      	b.n	8004e34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e1e:	2306      	movs	r3, #6
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	e007      	b.n	8004e34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e2a:	2309      	movs	r3, #9
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	e001      	b.n	8004e34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e30:	2309      	movs	r3, #9
 8004e32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	029b      	lsls	r3, r3, #10
 8004e48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	00d8acbf 	.word	0x00d8acbf
 8004e64:	00e4e1bf 	.word	0x00e4e1bf
 8004e68:	00f423ff 	.word	0x00f423ff
 8004e6c:	0106737f 	.word	0x0106737f
 8004e70:	011a499f 	.word	0x011a499f
 8004e74:	01312cff 	.word	0x01312cff
 8004e78:	014ca43f 	.word	0x014ca43f
 8004e7c:	016e35ff 	.word	0x016e35ff
 8004e80:	01a6ab1f 	.word	0x01a6ab1f
 8004e84:	01e847ff 	.word	0x01e847ff

08004e88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f043 0201 	orr.w	r2, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f023 0201 	bic.w	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d106      	bne.n	8004ef8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	e00b      	b.n	8004f10 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	e001      	b.n	8004f10 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e003      	b.n	8004f18 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f10:	2032      	movs	r0, #50	; 0x32
 8004f12:	f7fc fe71 	bl	8001bf8 <HAL_Delay>

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f20:	b084      	sub	sp, #16
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	e009      	b.n	8004f54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3340      	adds	r3, #64	; 0x40
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3301      	adds	r3, #1
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b0e      	cmp	r3, #14
 8004f58:	d9f2      	bls.n	8004f40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d112      	bne.n	8004f86 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38
 8004f84:	e00b      	b.n	8004f9e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb8:	461a      	mov	r2, r3
 8004fba:	680b      	ldr	r3, [r1, #0]
 8004fbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d10c      	bne.n	8004fde <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d104      	bne.n	8004fd4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fca:	2100      	movs	r1, #0
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f961 	bl	8005294 <USB_SetDevSpeed>
 8004fd2:	e008      	b.n	8004fe6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f95c 	bl	8005294 <USB_SetDevSpeed>
 8004fdc:	e003      	b.n	8004fe6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fde:	2103      	movs	r1, #3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f957 	bl	8005294 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fe6:	2110      	movs	r1, #16
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f90b 	bl	8005204 <USB_FlushTxFifo>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f929 	bl	8005250 <USB_FlushRxFifo>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	461a      	mov	r2, r3
 8005010:	2300      	movs	r3, #0
 8005012:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	461a      	mov	r2, r3
 800501c:	2300      	movs	r3, #0
 800501e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	461a      	mov	r2, r3
 8005028:	2300      	movs	r3, #0
 800502a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	e043      	b.n	80050ba <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005048:	d118      	bne.n	800507c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	461a      	mov	r2, r3
 800505e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e013      	b.n	800508e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	461a      	mov	r2, r3
 8005074:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	e008      	b.n	800508e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	461a      	mov	r2, r3
 800508a:	2300      	movs	r3, #0
 800508c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	461a      	mov	r2, r3
 800509c:	2300      	movs	r3, #0
 800509e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	461a      	mov	r2, r3
 80050ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	3301      	adds	r3, #1
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d3b7      	bcc.n	8005032 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c2:	2300      	movs	r3, #0
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	e043      	b.n	8005150 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050de:	d118      	bne.n	8005112 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f2:	461a      	mov	r2, r3
 80050f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e013      	b.n	8005124 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	461a      	mov	r2, r3
 800510a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	e008      	b.n	8005124 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	461a      	mov	r2, r3
 8005120:	2300      	movs	r3, #0
 8005122:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	461a      	mov	r2, r3
 8005132:	2300      	movs	r3, #0
 8005134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005142:	461a      	mov	r2, r3
 8005144:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005148:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	3301      	adds	r3, #1
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	429a      	cmp	r2, r3
 8005156:	d3b7      	bcc.n	80050c8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800516a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	2b01      	cmp	r3, #1
 8005170:	d111      	bne.n	8005196 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005178:	461a      	mov	r2, r3
 800517a:	4b20      	ldr	r3, [pc, #128]	; (80051fc <USB_DevInit+0x2dc>)
 800517c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005190:	f043 0303 	orr.w	r3, r3, #3
 8005194:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d105      	bne.n	80051b6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f043 0210 	orr.w	r2, r3, #16
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	4b11      	ldr	r3, [pc, #68]	; (8005200 <USB_DevInit+0x2e0>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f043 0208 	orr.w	r2, r3, #8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d107      	bne.n	80051ea <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051e2:	f043 0304 	orr.w	r3, r3, #4
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051f6:	b004      	add	sp, #16
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	00800100 	.word	0x00800100
 8005200:	803c3800 	.word	0x803c3800

08005204 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	019b      	lsls	r3, r3, #6
 8005216:	f043 0220 	orr.w	r2, r3, #32
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3301      	adds	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4a09      	ldr	r2, [pc, #36]	; (800524c <USB_FlushTxFifo+0x48>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d901      	bls.n	8005230 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e006      	b.n	800523e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b20      	cmp	r3, #32
 800523a:	d0f0      	beq.n	800521e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	00030d40 	.word	0x00030d40

08005250 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2210      	movs	r2, #16
 8005260:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4a09      	ldr	r2, [pc, #36]	; (8005290 <USB_FlushRxFifo+0x40>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e006      	b.n	8005282 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b10      	cmp	r3, #16
 800527e:	d0f0      	beq.n	8005262 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	00030d40 	.word	0x00030d40

08005294 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	68f9      	ldr	r1, [r7, #12]
 80052b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b087      	sub	sp, #28
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0306 	and.w	r3, r3, #6
 80052de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]
 80052ea:	e00a      	b.n	8005302 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d002      	beq.n	80052f8 <USB_GetDevSpeed+0x32>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b06      	cmp	r3, #6
 80052f6:	d102      	bne.n	80052fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052f8:	2302      	movs	r3, #2
 80052fa:	75fb      	strb	r3, [r7, #23]
 80052fc:	e001      	b.n	8005302 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052fe:	230f      	movs	r3, #15
 8005300:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
}
 8005304:	4618      	mov	r0, r3
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d13a      	bne.n	80053a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	2101      	movs	r1, #1
 800533e:	fa01 f303 	lsl.w	r3, r1, r3
 8005342:	b29b      	uxth	r3, r3
 8005344:	68f9      	ldr	r1, [r7, #12]
 8005346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800534a:	4313      	orrs	r3, r2
 800534c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d155      	bne.n	8005410 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	78db      	ldrb	r3, [r3, #3]
 800537e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005380:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	059b      	lsls	r3, r3, #22
 8005386:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005388:	4313      	orrs	r3, r2
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e036      	b.n	8005410 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	2101      	movs	r1, #1
 80053b4:	fa01 f303 	lsl.w	r3, r1, r3
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11a      	bne.n	8005410 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	78db      	ldrb	r3, [r3, #3]
 80053f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053f6:	430b      	orrs	r3, r1
 80053f8:	4313      	orrs	r3, r2
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d135      	bne.n	80054a8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	2101      	movs	r1, #1
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	b29b      	uxth	r3, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800545c:	4013      	ands	r3, r2
 800545e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	2101      	movs	r1, #1
 8005472:	fa01 f303 	lsl.w	r3, r1, r3
 8005476:	b29b      	uxth	r3, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005480:	4013      	ands	r3, r2
 8005482:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	0159      	lsls	r1, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	440b      	add	r3, r1
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	4619      	mov	r1, r3
 80054a0:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <USB_DeactivateEndpoint+0x100>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	600b      	str	r3, [r1, #0]
 80054a6:	e034      	b.n	8005512 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	2101      	movs	r1, #1
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	43db      	mvns	r3, r3
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c8:	4013      	ands	r3, r2
 80054ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	2101      	movs	r1, #1
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	43db      	mvns	r3, r3
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ec:	4013      	ands	r3, r2
 80054ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	0159      	lsls	r1, r3, #5
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	440b      	add	r3, r1
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	4619      	mov	r1, r3
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <USB_DeactivateEndpoint+0x104>)
 800550e:	4013      	ands	r3, r2
 8005510:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	ec337800 	.word	0xec337800
 8005524:	eff37800 	.word	0xeff37800

08005528 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	2b01      	cmp	r3, #1
 8005546:	f040 815c 	bne.w	8005802 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d132      	bne.n	80055b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	440a      	add	r2, r1
 8005568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005570:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005574:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005594:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b0:	0cdb      	lsrs	r3, r3, #19
 80055b2:	04db      	lsls	r3, r3, #19
 80055b4:	6113      	str	r3, [r2, #16]
 80055b6:	e074      	b.n	80056a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d2:	0cdb      	lsrs	r3, r3, #19
 80055d4:	04db      	lsls	r3, r3, #19
 80055d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	6959      	ldr	r1, [r3, #20]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	440b      	add	r3, r1
 8005614:	1e59      	subs	r1, r3, #1
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	fbb1 f3f3 	udiv	r3, r1, r3
 800561e:	04d9      	lsls	r1, r3, #19
 8005620:	4b9d      	ldr	r3, [pc, #628]	; (8005898 <USB_EPStartXfer+0x370>)
 8005622:	400b      	ands	r3, r1
 8005624:	69b9      	ldr	r1, [r7, #24]
 8005626:	0148      	lsls	r0, r1, #5
 8005628:	69f9      	ldr	r1, [r7, #28]
 800562a:	4401      	add	r1, r0
 800562c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005630:	4313      	orrs	r3, r2
 8005632:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564a:	69b9      	ldr	r1, [r7, #24]
 800564c:	0148      	lsls	r0, r1, #5
 800564e:	69f9      	ldr	r1, [r7, #28]
 8005650:	4401      	add	r1, r0
 8005652:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005656:	4313      	orrs	r3, r2
 8005658:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	78db      	ldrb	r3, [r3, #3]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d11f      	bne.n	80056a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005680:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d14b      	bne.n	8005740 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	461a      	mov	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	78db      	ldrb	r3, [r3, #3]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d128      	bne.n	800571e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d110      	bne.n	80056fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	e00f      	b.n	800571e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005738:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e12f      	b.n	80059a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800575e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	78db      	ldrb	r3, [r3, #3]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d015      	beq.n	8005794 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8117 	beq.w	80059a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	2101      	movs	r1, #1
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	69f9      	ldr	r1, [r7, #28]
 800578a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800578e:	4313      	orrs	r3, r2
 8005790:	634b      	str	r3, [r1, #52]	; 0x34
 8005792:	e105      	b.n	80059a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d110      	bne.n	80057c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	e00f      	b.n	80057e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	68d9      	ldr	r1, [r3, #12]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781a      	ldrb	r2, [r3, #0]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	b298      	uxth	r0, r3
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	4603      	mov	r3, r0
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fa2b 	bl	8005c56 <USB_WritePacket>
 8005800:	e0ce      	b.n	80059a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	440a      	add	r2, r1
 8005818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800581c:	0cdb      	lsrs	r3, r3, #19
 800581e:	04db      	lsls	r3, r3, #19
 8005820:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800583c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005840:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005844:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d126      	bne.n	800589c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005864:	69b9      	ldr	r1, [r7, #24]
 8005866:	0148      	lsls	r0, r1, #5
 8005868:	69f9      	ldr	r1, [r7, #28]
 800586a:	4401      	add	r1, r0
 800586c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005870:	4313      	orrs	r3, r2
 8005872:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005892:	6113      	str	r3, [r2, #16]
 8005894:	e036      	b.n	8005904 <USB_EPStartXfer+0x3dc>
 8005896:	bf00      	nop
 8005898:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4413      	add	r3, r2
 80058a6:	1e5a      	subs	r2, r3, #1
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	8afb      	ldrh	r3, [r7, #22]
 80058c2:	04d9      	lsls	r1, r3, #19
 80058c4:	4b39      	ldr	r3, [pc, #228]	; (80059ac <USB_EPStartXfer+0x484>)
 80058c6:	400b      	ands	r3, r1
 80058c8:	69b9      	ldr	r1, [r7, #24]
 80058ca:	0148      	lsls	r0, r1, #5
 80058cc:	69f9      	ldr	r1, [r7, #28]
 80058ce:	4401      	add	r1, r0
 80058d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058d4:	4313      	orrs	r3, r2
 80058d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	8af9      	ldrh	r1, [r7, #22]
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f4:	69b9      	ldr	r1, [r7, #24]
 80058f6:	0148      	lsls	r0, r1, #5
 80058f8:	69f9      	ldr	r1, [r7, #28]
 80058fa:	4401      	add	r1, r0
 80058fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005900:	4313      	orrs	r3, r2
 8005902:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d10d      	bne.n	8005926 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	68d9      	ldr	r1, [r3, #12]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	460a      	mov	r2, r1
 8005924:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	78db      	ldrb	r3, [r3, #3]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d128      	bne.n	8005980 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d110      	bne.n	8005960 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e00f      	b.n	8005980 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800597e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800599e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	1ff80000 	.word	0x1ff80000

080059b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	f040 80cd 	bne.w	8005b6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d132      	bne.n	8005a40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a38:	0cdb      	lsrs	r3, r3, #19
 8005a3a:	04db      	lsls	r3, r3, #19
 8005a3c:	6113      	str	r3, [r2, #16]
 8005a3e:	e04e      	b.n	8005ade <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5a:	0cdb      	lsrs	r3, r3, #19
 8005a5c:	04db      	lsls	r3, r3, #19
 8005a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d903      	bls.n	8005a98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ace:	6939      	ldr	r1, [r7, #16]
 8005ad0:	0148      	lsls	r0, r1, #5
 8005ad2:	6979      	ldr	r1, [r7, #20]
 8005ad4:	4401      	add	r1, r0
 8005ad6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ada:	4313      	orrs	r3, r2
 8005adc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d11e      	bne.n	8005b22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d009      	beq.n	8005b00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	461a      	mov	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e092      	b.n	8005c48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d07e      	beq.n	8005c48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b60:	6979      	ldr	r1, [r7, #20]
 8005b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b66:	4313      	orrs	r3, r2
 8005b68:	634b      	str	r3, [r1, #52]	; 0x34
 8005b6a:	e06d      	b.n	8005c48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b86:	0cdb      	lsrs	r3, r3, #19
 8005b88:	04db      	lsls	r3, r3, #19
 8005b8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005baa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf6:	6939      	ldr	r1, [r7, #16]
 8005bf8:	0148      	lsls	r0, r1, #5
 8005bfa:	6979      	ldr	r1, [r7, #20]
 8005bfc:	4401      	add	r1, r0
 8005bfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c02:	4313      	orrs	r3, r2
 8005c04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d10d      	bne.n	8005c28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	68d9      	ldr	r1, [r3, #12]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	460a      	mov	r2, r1
 8005c26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b089      	sub	sp, #36	; 0x24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	4611      	mov	r1, r2
 8005c62:	461a      	mov	r2, r3
 8005c64:	460b      	mov	r3, r1
 8005c66:	71fb      	strb	r3, [r7, #7]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005c74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d11a      	bne.n	8005cb2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c7c:	88bb      	ldrh	r3, [r7, #4]
 8005c7e:	3303      	adds	r3, #3
 8005c80:	089b      	lsrs	r3, r3, #2
 8005c82:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	e00f      	b.n	8005caa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	031a      	lsls	r2, r3, #12
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c96:	461a      	mov	r2, r3
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d3eb      	bcc.n	8005c8a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3724      	adds	r7, #36	; 0x24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b089      	sub	sp, #36	; 0x24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	3303      	adds	r3, #3
 8005cda:	089b      	lsrs	r3, r3, #2
 8005cdc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	e00b      	b.n	8005cfc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d3ef      	bcc.n	8005ce4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005d04:	69fb      	ldr	r3, [r7, #28]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3724      	adds	r7, #36	; 0x24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d12c      	bne.n	8005d88 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	db12      	blt.n	8005d66 <USB_EPSetStall+0x54>
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00f      	beq.n	8005d66 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	0151      	lsls	r1, r2, #5
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	440a      	add	r2, r1
 8005d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d64:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	e02b      	b.n	8005de0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	db12      	blt.n	8005dc0 <USB_EPSetStall+0xae>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00f      	beq.n	8005dc0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dbe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d128      	bne.n	8005e5c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	78db      	ldrb	r3, [r3, #3]
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d003      	beq.n	8005e3a <USB_EPClearStall+0x4c>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	78db      	ldrb	r3, [r3, #3]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d138      	bne.n	8005eac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e027      	b.n	8005eac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	78db      	ldrb	r3, [r3, #3]
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d003      	beq.n	8005e8c <USB_EPClearStall+0x9e>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	78db      	ldrb	r3, [r3, #3]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d10f      	bne.n	8005eac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eaa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005edc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f20:	f023 0302 	bic.w	r3, r3, #2
 8005f24:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005f26:	2003      	movs	r0, #3
 8005f28:	f7fb fe66 	bl	8001bf8 <HAL_Delay>

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f50:	f043 0302 	orr.w	r3, r3, #2
 8005f54:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005f56:	2003      	movs	r0, #3
 8005f58:	f7fb fe4e 	bl	8001bf8 <HAL_Delay>

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b085      	sub	sp, #20
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	4013      	ands	r3, r2
 8005fae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	0c1b      	lsrs	r3, r3, #16
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	b29b      	uxth	r3, r3
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	4013      	ands	r3, r2
 8006020:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006022:	68bb      	ldr	r3, [r7, #8]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
 8006060:	01db      	lsls	r3, r3, #7
 8006062:	b2db      	uxtb	r3, r3
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4013      	ands	r3, r2
 800607c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800607e:	68bb      	ldr	r3, [r7, #8]
}
 8006080:	4618      	mov	r0, r3
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	f003 0301 	and.w	r3, r3, #1
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060c6:	f023 0307 	bic.w	r3, r3, #7
 80060ca:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 0306 	and.w	r3, r3, #6
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d109      	bne.n	80060f0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ea:	f043 0303 	orr.w	r3, r3, #3
 80060ee:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006102:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	460b      	mov	r3, r1
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	333c      	adds	r3, #60	; 0x3c
 800612a:	3304      	adds	r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	4a26      	ldr	r2, [pc, #152]	; (80061cc <USB_EP0_OutStart+0xb8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d90a      	bls.n	800614e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006148:	d101      	bne.n	800614e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	e037      	b.n	80061be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006154:	461a      	mov	r2, r3
 8006156:	2300      	movs	r3, #0
 8006158:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006168:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800616c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800617c:	f043 0318 	orr.w	r3, r3, #24
 8006180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006190:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006194:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006196:	7afb      	ldrb	r3, [r7, #11]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d10f      	bne.n	80061bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a2:	461a      	mov	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80061ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	4f54300a 	.word	0x4f54300a

080061d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a13      	ldr	r2, [pc, #76]	; (8006234 <USB_CoreReset+0x64>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d901      	bls.n	80061ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e01b      	b.n	8006226 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	daf2      	bge.n	80061dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f043 0201 	orr.w	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3301      	adds	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a09      	ldr	r2, [pc, #36]	; (8006234 <USB_CoreReset+0x64>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d901      	bls.n	8006218 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e006      	b.n	8006226 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b01      	cmp	r3, #1
 8006222:	d0f0      	beq.n	8006206 <USB_CoreReset+0x36>

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	00030d40 	.word	0x00030d40

08006238 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800623c:	4904      	ldr	r1, [pc, #16]	; (8006250 <MX_FATFS_Init+0x18>)
 800623e:	4805      	ldr	r0, [pc, #20]	; (8006254 <MX_FATFS_Init+0x1c>)
 8006240:	f001 fb88 	bl	8007954 <FATFS_LinkDriver>
 8006244:	4603      	mov	r3, r0
 8006246:	461a      	mov	r2, r3
 8006248:	4b03      	ldr	r3, [pc, #12]	; (8006258 <MX_FATFS_Init+0x20>)
 800624a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800624c:	bf00      	nop
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000394 	.word	0x20000394
 8006254:	2000000c 	.word	0x2000000c
 8006258:	20000398 	.word	0x20000398

0800625c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006266:	4b06      	ldr	r3, [pc, #24]	; (8006280 <USER_initialize+0x24>)
 8006268:	2201      	movs	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <USER_initialize+0x24>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20000009 	.word	0x20000009

08006284 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <USER_status+0x24>)
 8006290:	2201      	movs	r2, #1
 8006292:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006294:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <USER_status+0x24>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000009 	.word	0x20000009

080062ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80062bc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
 80062d6:	4603      	mov	r3, r0
 80062d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80062da:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	603a      	str	r2, [r7, #0]
 80062f2:	71fb      	strb	r3, [r7, #7]
 80062f4:	460b      	mov	r3, r1
 80062f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
    return res;
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	7c1b      	ldrb	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d115      	bne.n	800634e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006326:	2202      	movs	r2, #2
 8006328:	2181      	movs	r1, #129	; 0x81
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 fe93 	bl	8008056 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800633a:	2202      	movs	r2, #2
 800633c:	2101      	movs	r1, #1
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fe89 	bl	8008056 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800634c:	e012      	b.n	8006374 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800634e:	2340      	movs	r3, #64	; 0x40
 8006350:	2202      	movs	r2, #2
 8006352:	2181      	movs	r1, #129	; 0x81
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 fe7e 	bl	8008056 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006360:	2340      	movs	r3, #64	; 0x40
 8006362:	2202      	movs	r2, #2
 8006364:	2101      	movs	r1, #1
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 fe75 	bl	8008056 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006374:	2308      	movs	r3, #8
 8006376:	2203      	movs	r2, #3
 8006378:	2182      	movs	r1, #130	; 0x82
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fe6b 	bl	8008056 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006386:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800638a:	f001 ffe1 	bl	8008350 <malloc>
 800638e:	4603      	mov	r3, r0
 8006390:	461a      	mov	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d102      	bne.n	80063a8 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80063a2:	2301      	movs	r3, #1
 80063a4:	73fb      	strb	r3, [r7, #15]
 80063a6:	e026      	b.n	80063f6 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063ae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	7c1b      	ldrb	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063dc:	2101      	movs	r1, #1
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 ff2a 	bl	8008238 <USBD_LL_PrepareReceive>
 80063e4:	e007      	b.n	80063f6 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	2101      	movs	r1, #1
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 ff21 	bl	8008238 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006410:	2181      	movs	r1, #129	; 0x81
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 fe45 	bl	80080a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800641e:	2101      	movs	r1, #1
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fe3e 	bl	80080a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800642e:	2182      	movs	r1, #130	; 0x82
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 fe36 	bl	80080a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00e      	beq.n	8006464 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006456:	4618      	mov	r0, r3
 8006458:	f001 ff82 	bl	8008360 <free>
    pdev->pClassData = NULL;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b086      	sub	sp, #24
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800647e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006494:	2b00      	cmp	r3, #0
 8006496:	d039      	beq.n	800650c <USBD_CDC_Setup+0x9e>
 8006498:	2b20      	cmp	r3, #32
 800649a:	d17c      	bne.n	8006596 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	88db      	ldrh	r3, [r3, #6]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d029      	beq.n	80064f8 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	b25b      	sxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da11      	bge.n	80064d2 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80064ba:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	88d2      	ldrh	r2, [r2, #6]
 80064c0:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064c2:	6939      	ldr	r1, [r7, #16]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	88db      	ldrh	r3, [r3, #6]
 80064c8:	461a      	mov	r2, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 f972 	bl	80077b4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80064d0:	e068      	b.n	80065a4 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	785a      	ldrb	r2, [r3, #1]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	88db      	ldrh	r3, [r3, #6]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064e8:	6939      	ldr	r1, [r7, #16]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	88db      	ldrh	r3, [r3, #6]
 80064ee:	461a      	mov	r2, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 f98d 	bl	8007810 <USBD_CtlPrepareRx>
    break;
 80064f6:	e055      	b.n	80065a4 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	7850      	ldrb	r0, [r2, #1]
 8006504:	2200      	movs	r2, #0
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	4798      	blx	r3
    break;
 800650a:	e04b      	b.n	80065a4 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b0a      	cmp	r3, #10
 8006512:	d017      	beq.n	8006544 <USBD_CDC_Setup+0xd6>
 8006514:	2b0b      	cmp	r3, #11
 8006516:	d029      	beq.n	800656c <USBD_CDC_Setup+0xfe>
 8006518:	2b00      	cmp	r3, #0
 800651a:	d133      	bne.n	8006584 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006522:	2b03      	cmp	r3, #3
 8006524:	d107      	bne.n	8006536 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006526:	f107 030c 	add.w	r3, r7, #12
 800652a:	2202      	movs	r2, #2
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 f940 	bl	80077b4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006534:	e02e      	b.n	8006594 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 f8d0 	bl	80076de <USBD_CtlError>
			  ret = USBD_FAIL;
 800653e:	2302      	movs	r3, #2
 8006540:	75fb      	strb	r3, [r7, #23]
      break;
 8006542:	e027      	b.n	8006594 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800654a:	2b03      	cmp	r3, #3
 800654c:	d107      	bne.n	800655e <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800654e:	f107 030f 	add.w	r3, r7, #15
 8006552:	2201      	movs	r2, #1
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f92c 	bl	80077b4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800655c:	e01a      	b.n	8006594 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 f8bc 	bl	80076de <USBD_CtlError>
			  ret = USBD_FAIL;
 8006566:	2302      	movs	r3, #2
 8006568:	75fb      	strb	r3, [r7, #23]
      break;
 800656a:	e013      	b.n	8006594 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006572:	2b03      	cmp	r3, #3
 8006574:	d00d      	beq.n	8006592 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 f8b0 	bl	80076de <USBD_CtlError>
			  ret = USBD_FAIL;
 800657e:	2302      	movs	r3, #2
 8006580:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006582:	e006      	b.n	8006592 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f001 f8a9 	bl	80076de <USBD_CtlError>
      ret = USBD_FAIL;
 800658c:	2302      	movs	r3, #2
 800658e:	75fb      	strb	r3, [r7, #23]
      break;
 8006590:	e000      	b.n	8006594 <USBD_CDC_Setup+0x126>
      break;
 8006592:	bf00      	nop
    }
    break;
 8006594:	e006      	b.n	80065a4 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 f8a0 	bl	80076de <USBD_CtlError>
    ret = USBD_FAIL;
 800659e:	2302      	movs	r3, #2
 80065a0:	75fb      	strb	r3, [r7, #23]
    break;
 80065a2:	bf00      	nop
  }

  return ret;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065c0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80065c8:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d03a      	beq.n	800664a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	440b      	add	r3, r1
 80065e2:	331c      	adds	r3, #28
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d029      	beq.n	800663e <USBD_CDC_DataIn+0x90>
 80065ea:	78fa      	ldrb	r2, [r7, #3]
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	331c      	adds	r3, #28
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	78f9      	ldrb	r1, [r7, #3]
 80065fe:	68b8      	ldr	r0, [r7, #8]
 8006600:	460b      	mov	r3, r1
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	1a5b      	subs	r3, r3, r1
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4403      	add	r3, r0
 800660a:	3344      	adds	r3, #68	; 0x44
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	fbb2 f1f3 	udiv	r1, r2, r3
 8006612:	fb03 f301 	mul.w	r3, r3, r1
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d110      	bne.n	800663e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800661c:	78fa      	ldrb	r2, [r7, #3]
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	331c      	adds	r3, #28
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006630:	78f9      	ldrb	r1, [r7, #3]
 8006632:	2300      	movs	r3, #0
 8006634:	2200      	movs	r2, #0
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 fddb 	bl	80081f2 <USBD_LL_Transmit>
 800663c:	e003      	b.n	8006646 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	e000      	b.n	800664c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800664a:	2302      	movs	r3, #2
  }
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006666:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fe06 	bl	800827e <USBD_LL_GetRxDataSize>
 8006672:	4602      	mov	r2, r0
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00d      	beq.n	80066a0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006698:	4611      	mov	r1, r2
 800669a:	4798      	blx	r3

    return USBD_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	e000      	b.n	80066a2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80066a0:	2302      	movs	r3, #2
  }
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066b8:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d015      	beq.n	80066f0 <USBD_CDC_EP0_RxReady+0x46>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80066ca:	2bff      	cmp	r3, #255	; 0xff
 80066cc:	d010      	beq.n	80066f0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80066dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066e4:	b292      	uxth	r2, r2
 80066e6:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	22ff      	movs	r2, #255	; 0xff
 80066ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2243      	movs	r2, #67	; 0x43
 8006708:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800670a:	4b03      	ldr	r3, [pc, #12]	; (8006718 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	200000a8 	.word	0x200000a8

0800671c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2243      	movs	r2, #67	; 0x43
 8006728:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800672a:	4b03      	ldr	r3, [pc, #12]	; (8006738 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20000064 	.word	0x20000064

0800673c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2243      	movs	r2, #67	; 0x43
 8006748:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800674a:	4b03      	ldr	r3, [pc, #12]	; (8006758 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	200000ec 	.word	0x200000ec

0800675c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	220a      	movs	r2, #10
 8006768:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800676a:	4b03      	ldr	r3, [pc, #12]	; (8006778 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20000020 	.word	0x20000020

0800677c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006786:	2302      	movs	r3, #2
 8006788:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b087      	sub	sp, #28
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	4613      	mov	r3, r2
 80067b6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80067be:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80067c8:	88fa      	ldrh	r2, [r7, #6]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80067ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	4613      	mov	r3, r2
 8006812:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800681a:	2302      	movs	r3, #2
 800681c:	e01a      	b.n	8006854 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	79fa      	ldrb	r2, [r7, #7]
 800684a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f001 fb9b 	bl	8007f88 <USBD_LL_Init>

  return USBD_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d006      	beq.n	800687e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	73fb      	strb	r3, [r7, #15]
 800687c:	e001      	b.n	8006882 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800687e:	2302      	movs	r3, #2
 8006880:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fbc1 	bl	8008020 <USBD_LL_Start>

  return USBD_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	460b      	mov	r3, r1
 80068c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80068ca:	2302      	movs	r3, #2
 80068cc:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00c      	beq.n	80068f2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	78fa      	ldrb	r2, [r7, #3]
 80068e2:	4611      	mov	r1, r2
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	4611      	mov	r1, r2
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4798      	blx	r3
  return USBD_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fe95 	bl	8007664 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006948:	461a      	mov	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	2b01      	cmp	r3, #1
 800695c:	d00c      	beq.n	8006978 <USBD_LL_SetupStage+0x56>
 800695e:	2b01      	cmp	r3, #1
 8006960:	d302      	bcc.n	8006968 <USBD_LL_SetupStage+0x46>
 8006962:	2b02      	cmp	r3, #2
 8006964:	d010      	beq.n	8006988 <USBD_LL_SetupStage+0x66>
 8006966:	e017      	b.n	8006998 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fa05 	bl	8006d80 <USBD_StdDevReq>
    break;
 8006976:	e01a      	b.n	80069ae <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fa67 	bl	8006e54 <USBD_StdItfReq>
    break;
 8006986:	e012      	b.n	80069ae <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 faa5 	bl	8006ee0 <USBD_StdEPReq>
    break;
 8006996:	e00a      	b.n	80069ae <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800699e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 fb9a 	bl	80080e0 <USBD_LL_StallEP>
    break;
 80069ac:	bf00      	nop
  }

  return USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	460b      	mov	r3, r1
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d14b      	bne.n	8006a64 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80069d2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d134      	bne.n	8006a48 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d919      	bls.n	8006a1e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	1ad2      	subs	r2, r2, r3
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d203      	bcs.n	8006a0c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	e002      	b.n	8006a12 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 ff18 	bl	800784c <USBD_CtlContinueRx>
 8006a1c:	e038      	b.n	8006a90 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d105      	bne.n	8006a40 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 ff15 	bl	8007870 <USBD_CtlSendStatus>
 8006a46:	e023      	b.n	8006a90 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006a4e:	2b05      	cmp	r3, #5
 8006a50:	d11e      	bne.n	8006a90 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f001 fb3f 	bl	80080e0 <USBD_LL_StallEP>
 8006a62:	e015      	b.n	8006a90 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00d      	beq.n	8006a8c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d108      	bne.n	8006a8c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	7afa      	ldrb	r2, [r7, #11]
 8006a84:	4611      	mov	r1, r2
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	4798      	blx	r3
 8006a8a:	e001      	b.n	8006a90 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e000      	b.n	8006a92 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b086      	sub	sp, #24
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	607a      	str	r2, [r7, #4]
 8006aa6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006aa8:	7afb      	ldrb	r3, [r7, #11]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d17f      	bne.n	8006bae <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3314      	adds	r3, #20
 8006ab2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d15c      	bne.n	8006b78 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d915      	bls.n	8006af6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	1ad2      	subs	r2, r2, r3
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fe82 	bl	80077ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2200      	movs	r2, #0
 8006aec:	2100      	movs	r1, #0
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f001 fba2 	bl	8008238 <USBD_LL_PrepareReceive>
 8006af4:	e04e      	b.n	8006b94 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	6912      	ldr	r2, [r2, #16]
 8006afe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b02:	fb02 f201 	mul.w	r2, r2, r1
 8006b06:	1a9b      	subs	r3, r3, r2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d11c      	bne.n	8006b46 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d316      	bcc.n	8006b46 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d20f      	bcs.n	8006b46 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b26:	2200      	movs	r2, #0
 8006b28:	2100      	movs	r1, #0
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 fe5e 	bl	80077ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f001 fb7a 	bl	8008238 <USBD_LL_PrepareReceive>
 8006b44:	e026      	b.n	8006b94 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d105      	bne.n	8006b68 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b68:	2180      	movs	r1, #128	; 0x80
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f001 fab8 	bl	80080e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 fe90 	bl	8007896 <USBD_CtlReceiveStatus>
 8006b76:	e00d      	b.n	8006b94 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d004      	beq.n	8006b8c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b8c:	2180      	movs	r1, #128	; 0x80
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f001 faa6 	bl	80080e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d11d      	bne.n	8006bda <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff fe82 	bl	80068a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006bac:	e015      	b.n	8006bda <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00d      	beq.n	8006bd6 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d108      	bne.n	8006bd6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	7afa      	ldrb	r2, [r7, #11]
 8006bce:	4611      	mov	r1, r2
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	4798      	blx	r3
 8006bd4:	e001      	b.n	8006bda <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e000      	b.n	8006bdc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 fa2f 	bl	8008056 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2240      	movs	r2, #64	; 0x40
 8006c04:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c08:	2340      	movs	r3, #64	; 0x40
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2180      	movs	r1, #128	; 0x80
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f001 fa21 	bl	8008056 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2240      	movs	r2, #64	; 0x40
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6852      	ldr	r2, [r2, #4]
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	4611      	mov	r1, r2
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	4798      	blx	r3
  }

  return USBD_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	78fa      	ldrb	r2, [r7, #3]
 8006c76:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2204      	movs	r2, #4
 8006c9e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d10b      	bne.n	8006cfc <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6852      	ldr	r2, [r2, #4]
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	4611      	mov	r1, r2
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3

  return USBD_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d004      	beq.n	8006da4 <USBD_StdDevReq+0x24>
 8006d9a:	2b40      	cmp	r3, #64	; 0x40
 8006d9c:	d002      	beq.n	8006da4 <USBD_StdDevReq+0x24>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <USBD_StdDevReq+0x34>
 8006da2:	e04c      	b.n	8006e3e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
    break;
 8006db2:	e049      	b.n	8006e48 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	2b09      	cmp	r3, #9
 8006dba:	d83a      	bhi.n	8006e32 <USBD_StdDevReq+0xb2>
 8006dbc:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <USBD_StdDevReq+0x44>)
 8006dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc2:	bf00      	nop
 8006dc4:	08006e15 	.word	0x08006e15
 8006dc8:	08006e29 	.word	0x08006e29
 8006dcc:	08006e33 	.word	0x08006e33
 8006dd0:	08006e1f 	.word	0x08006e1f
 8006dd4:	08006e33 	.word	0x08006e33
 8006dd8:	08006df7 	.word	0x08006df7
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006e33 	.word	0x08006e33
 8006de4:	08006e0b 	.word	0x08006e0b
 8006de8:	08006e01 	.word	0x08006e01
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f9d2 	bl	8007198 <USBD_GetDescriptor>
      break;
 8006df4:	e022      	b.n	8006e3c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fac7 	bl	800738c <USBD_SetAddress>
      break;
 8006dfe:	e01d      	b.n	8006e3c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fb04 	bl	8007410 <USBD_SetConfig>
      break;
 8006e08:	e018      	b.n	8006e3c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fb8d 	bl	800752c <USBD_GetConfig>
      break;
 8006e12:	e013      	b.n	8006e3c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fbbc 	bl	8007594 <USBD_GetStatus>
      break;
 8006e1c:	e00e      	b.n	8006e3c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fbea 	bl	80075fa <USBD_SetFeature>
      break;
 8006e26:	e009      	b.n	8006e3c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fbf9 	bl	8007622 <USBD_ClrFeature>
      break;
 8006e30:	e004      	b.n	8006e3c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fc52 	bl	80076de <USBD_CtlError>
      break;
 8006e3a:	bf00      	nop
    }
    break;
 8006e3c:	e004      	b.n	8006e48 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fc4c 	bl	80076de <USBD_CtlError>
    break;
 8006e46:	bf00      	nop
  }

  return ret;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop

08006e54 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e6a:	2b20      	cmp	r3, #32
 8006e6c:	d003      	beq.n	8006e76 <USBD_StdItfReq+0x22>
 8006e6e:	2b40      	cmp	r3, #64	; 0x40
 8006e70:	d001      	beq.n	8006e76 <USBD_StdItfReq+0x22>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d12a      	bne.n	8006ecc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d81d      	bhi.n	8006ebe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	889b      	ldrh	r3, [r3, #4]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d813      	bhi.n	8006eb4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4798      	blx	r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	88db      	ldrh	r3, [r3, #6]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d110      	bne.n	8006ec8 <USBD_StdItfReq+0x74>
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10d      	bne.n	8006ec8 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fcdf 	bl	8007870 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006eb2:	e009      	b.n	8006ec8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fc11 	bl	80076de <USBD_CtlError>
      break;
 8006ebc:	e004      	b.n	8006ec8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fc0c 	bl	80076de <USBD_CtlError>
      break;
 8006ec6:	e000      	b.n	8006eca <USBD_StdItfReq+0x76>
      break;
 8006ec8:	bf00      	nop
    }
    break;
 8006eca:	e004      	b.n	8006ed6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fc05 	bl	80076de <USBD_CtlError>
    break;
 8006ed4:	bf00      	nop
  }

  return USBD_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	889b      	ldrh	r3, [r3, #4]
 8006ef2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d004      	beq.n	8006f0a <USBD_StdEPReq+0x2a>
 8006f00:	2b40      	cmp	r3, #64	; 0x40
 8006f02:	d002      	beq.n	8006f0a <USBD_StdEPReq+0x2a>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d008      	beq.n	8006f1a <USBD_StdEPReq+0x3a>
 8006f08:	e13b      	b.n	8007182 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	4798      	blx	r3
    break;
 8006f18:	e138      	b.n	800718c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d10a      	bne.n	8006f3c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
 8006f34:	4603      	mov	r3, r0
 8006f36:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	e128      	b.n	800718e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	785b      	ldrb	r3, [r3, #1]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d03e      	beq.n	8006fc2 <USBD_StdEPReq+0xe2>
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d002      	beq.n	8006f4e <USBD_StdEPReq+0x6e>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d070      	beq.n	800702e <USBD_StdEPReq+0x14e>
 8006f4c:	e113      	b.n	8007176 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d002      	beq.n	8006f5e <USBD_StdEPReq+0x7e>
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d015      	beq.n	8006f88 <USBD_StdEPReq+0xa8>
 8006f5c:	e02b      	b.n	8006fb6 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00c      	beq.n	8006f7e <USBD_StdEPReq+0x9e>
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	2b80      	cmp	r3, #128	; 0x80
 8006f68:	d009      	beq.n	8006f7e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006f6a:	7bbb      	ldrb	r3, [r7, #14]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 f8b6 	bl	80080e0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006f74:	2180      	movs	r1, #128	; 0x80
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 f8b2 	bl	80080e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006f7c:	e020      	b.n	8006fc0 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fbac 	bl	80076de <USBD_CtlError>
        break;
 8006f86:	e01b      	b.n	8006fc0 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	885b      	ldrh	r3, [r3, #2]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10e      	bne.n	8006fae <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <USBD_StdEPReq+0xce>
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	2b80      	cmp	r3, #128	; 0x80
 8006f9a:	d008      	beq.n	8006fae <USBD_StdEPReq+0xce>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	88db      	ldrh	r3, [r3, #6]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 f899 	bl	80080e0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fc5e 	bl	8007870 <USBD_CtlSendStatus>

        break;
 8006fb4:	e004      	b.n	8006fc0 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fb90 	bl	80076de <USBD_CtlError>
        break;
 8006fbe:	bf00      	nop
      }
      break;
 8006fc0:	e0de      	b.n	8007180 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d002      	beq.n	8006fd2 <USBD_StdEPReq+0xf2>
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d015      	beq.n	8006ffc <USBD_StdEPReq+0x11c>
 8006fd0:	e026      	b.n	8007020 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00c      	beq.n	8006ff2 <USBD_StdEPReq+0x112>
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2b80      	cmp	r3, #128	; 0x80
 8006fdc:	d009      	beq.n	8006ff2 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 f87c 	bl	80080e0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006fe8:	2180      	movs	r1, #128	; 0x80
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 f878 	bl	80080e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006ff0:	e01c      	b.n	800702c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fb72 	bl	80076de <USBD_CtlError>
        break;
 8006ffa:	e017      	b.n	800702c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	885b      	ldrh	r3, [r3, #2]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d112      	bne.n	800702a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 f883 	bl	800811e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fc29 	bl	8007870 <USBD_CtlSendStatus>
        }
        break;
 800701e:	e004      	b.n	800702a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fb5b 	bl	80076de <USBD_CtlError>
        break;
 8007028:	e000      	b.n	800702c <USBD_StdEPReq+0x14c>
        break;
 800702a:	bf00      	nop
      }
      break;
 800702c:	e0a8      	b.n	8007180 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007034:	2b02      	cmp	r3, #2
 8007036:	d002      	beq.n	800703e <USBD_StdEPReq+0x15e>
 8007038:	2b03      	cmp	r3, #3
 800703a:	d031      	beq.n	80070a0 <USBD_StdEPReq+0x1c0>
 800703c:	e095      	b.n	800716a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d007      	beq.n	8007054 <USBD_StdEPReq+0x174>
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b80      	cmp	r3, #128	; 0x80
 8007048:	d004      	beq.n	8007054 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fb46 	bl	80076de <USBD_CtlError>
          break;
 8007052:	e08f      	b.n	8007174 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007058:	2b00      	cmp	r3, #0
 800705a:	da0b      	bge.n	8007074 <USBD_StdEPReq+0x194>
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	3310      	adds	r3, #16
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	4413      	add	r3, r2
 8007070:	3304      	adds	r3, #4
 8007072:	e00a      	b.n	800708a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	4413      	add	r3, r2
 800708a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2202      	movs	r2, #2
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb8b 	bl	80077b4 <USBD_CtlSendData>
          break;
 800709e:	e069      	b.n	8007174 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80070a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	da11      	bge.n	80070cc <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	f003 020f 	and.w	r2, r3, #15
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	3318      	adds	r3, #24
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d117      	bne.n	80070f2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fb0a 	bl	80076de <USBD_CtlError>
            break;
 80070ca:	e053      	b.n	8007174 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	f003 020f 	and.w	r2, r3, #15
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	440b      	add	r3, r1
 80070de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d104      	bne.n	80070f2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 faf7 	bl	80076de <USBD_CtlError>
            break;
 80070f0:	e040      	b.n	8007174 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80070f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	da0b      	bge.n	8007112 <USBD_StdEPReq+0x232>
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	3310      	adds	r3, #16
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	4413      	add	r3, r2
 800710e:	3304      	adds	r3, #4
 8007110:	e00a      	b.n	8007128 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <USBD_StdEPReq+0x256>
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	2b80      	cmp	r3, #128	; 0x80
 8007134:	d103      	bne.n	800713e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	e00e      	b.n	800715c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 f80a 	bl	800815c <USBD_LL_IsStallEP>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2201      	movs	r2, #1
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	e002      	b.n	800715c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2202      	movs	r2, #2
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fb26 	bl	80077b4 <USBD_CtlSendData>
          break;
 8007168:	e004      	b.n	8007174 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fab6 	bl	80076de <USBD_CtlError>
        break;
 8007172:	bf00      	nop
      }
      break;
 8007174:	e004      	b.n	8007180 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fab0 	bl	80076de <USBD_CtlError>
      break;
 800717e:	bf00      	nop
    }
    break;
 8007180:	e004      	b.n	800718c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 faaa 	bl	80076de <USBD_CtlError>
    break;
 800718a:	bf00      	nop
  }

  return ret;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	885b      	ldrh	r3, [r3, #2]
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	3b01      	subs	r3, #1
 80071ac:	2b06      	cmp	r3, #6
 80071ae:	f200 80c9 	bhi.w	8007344 <USBD_GetDescriptor+0x1ac>
 80071b2:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <USBD_GetDescriptor+0x20>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	080071d5 	.word	0x080071d5
 80071bc:	080071ed 	.word	0x080071ed
 80071c0:	0800722d 	.word	0x0800722d
 80071c4:	08007345 	.word	0x08007345
 80071c8:	08007345 	.word	0x08007345
 80071cc:	080072f1 	.word	0x080072f1
 80071d0:	08007317 	.word	0x08007317
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	7c12      	ldrb	r2, [r2, #16]
 80071e0:	f107 010a 	add.w	r1, r7, #10
 80071e4:	4610      	mov	r0, r2
 80071e6:	4798      	blx	r3
 80071e8:	60f8      	str	r0, [r7, #12]
    break;
 80071ea:	e0b0      	b.n	800734e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	7c1b      	ldrb	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10d      	bne.n	8007210 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	f107 020a 	add.w	r2, r7, #10
 8007200:	4610      	mov	r0, r2
 8007202:	4798      	blx	r3
 8007204:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3301      	adds	r3, #1
 800720a:	2202      	movs	r2, #2
 800720c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800720e:	e09e      	b.n	800734e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	f107 020a 	add.w	r2, r7, #10
 800721c:	4610      	mov	r0, r2
 800721e:	4798      	blx	r3
 8007220:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3301      	adds	r3, #1
 8007226:	2202      	movs	r2, #2
 8007228:	701a      	strb	r2, [r3, #0]
    break;
 800722a:	e090      	b.n	800734e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	885b      	ldrh	r3, [r3, #2]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b05      	cmp	r3, #5
 8007234:	d856      	bhi.n	80072e4 <USBD_GetDescriptor+0x14c>
 8007236:	a201      	add	r2, pc, #4	; (adr r2, 800723c <USBD_GetDescriptor+0xa4>)
 8007238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723c:	08007255 	.word	0x08007255
 8007240:	0800726d 	.word	0x0800726d
 8007244:	08007285 	.word	0x08007285
 8007248:	0800729d 	.word	0x0800729d
 800724c:	080072b5 	.word	0x080072b5
 8007250:	080072cd 	.word	0x080072cd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	7c12      	ldrb	r2, [r2, #16]
 8007260:	f107 010a 	add.w	r1, r7, #10
 8007264:	4610      	mov	r0, r2
 8007266:	4798      	blx	r3
 8007268:	60f8      	str	r0, [r7, #12]
      break;
 800726a:	e040      	b.n	80072ee <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	7c12      	ldrb	r2, [r2, #16]
 8007278:	f107 010a 	add.w	r1, r7, #10
 800727c:	4610      	mov	r0, r2
 800727e:	4798      	blx	r3
 8007280:	60f8      	str	r0, [r7, #12]
      break;
 8007282:	e034      	b.n	80072ee <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	7c12      	ldrb	r2, [r2, #16]
 8007290:	f107 010a 	add.w	r1, r7, #10
 8007294:	4610      	mov	r0, r2
 8007296:	4798      	blx	r3
 8007298:	60f8      	str	r0, [r7, #12]
      break;
 800729a:	e028      	b.n	80072ee <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	7c12      	ldrb	r2, [r2, #16]
 80072a8:	f107 010a 	add.w	r1, r7, #10
 80072ac:	4610      	mov	r0, r2
 80072ae:	4798      	blx	r3
 80072b0:	60f8      	str	r0, [r7, #12]
      break;
 80072b2:	e01c      	b.n	80072ee <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	7c12      	ldrb	r2, [r2, #16]
 80072c0:	f107 010a 	add.w	r1, r7, #10
 80072c4:	4610      	mov	r0, r2
 80072c6:	4798      	blx	r3
 80072c8:	60f8      	str	r0, [r7, #12]
      break;
 80072ca:	e010      	b.n	80072ee <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	7c12      	ldrb	r2, [r2, #16]
 80072d8:	f107 010a 	add.w	r1, r7, #10
 80072dc:	4610      	mov	r0, r2
 80072de:	4798      	blx	r3
 80072e0:	60f8      	str	r0, [r7, #12]
      break;
 80072e2:	e004      	b.n	80072ee <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f9f9 	bl	80076de <USBD_CtlError>
      return;
 80072ec:	e04b      	b.n	8007386 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80072ee:	e02e      	b.n	800734e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	7c1b      	ldrb	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d109      	bne.n	800730c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007300:	f107 020a 	add.w	r2, r7, #10
 8007304:	4610      	mov	r0, r2
 8007306:	4798      	blx	r3
 8007308:	60f8      	str	r0, [r7, #12]
      break;
 800730a:	e020      	b.n	800734e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9e5 	bl	80076de <USBD_CtlError>
      return;
 8007314:	e037      	b.n	8007386 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	7c1b      	ldrb	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10d      	bne.n	800733a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007326:	f107 020a 	add.w	r2, r7, #10
 800732a:	4610      	mov	r0, r2
 800732c:	4798      	blx	r3
 800732e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	2207      	movs	r2, #7
 8007336:	701a      	strb	r2, [r3, #0]
      break;
 8007338:	e009      	b.n	800734e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f9ce 	bl	80076de <USBD_CtlError>
      return;
 8007342:	e020      	b.n	8007386 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f9c9 	bl	80076de <USBD_CtlError>
    return;
 800734c:	e01b      	b.n	8007386 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800734e:	897b      	ldrh	r3, [r7, #10]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d011      	beq.n	8007378 <USBD_GetDescriptor+0x1e0>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	88db      	ldrh	r3, [r3, #6]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00d      	beq.n	8007378 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	88da      	ldrh	r2, [r3, #6]
 8007360:	897b      	ldrh	r3, [r7, #10]
 8007362:	4293      	cmp	r3, r2
 8007364:	bf28      	it	cs
 8007366:	4613      	movcs	r3, r2
 8007368:	b29b      	uxth	r3, r3
 800736a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800736c:	897b      	ldrh	r3, [r7, #10]
 800736e:	461a      	mov	r2, r3
 8007370:	68f9      	ldr	r1, [r7, #12]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa1e 	bl	80077b4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	88db      	ldrh	r3, [r3, #6]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa75 	bl	8007870 <USBD_CtlSendStatus>
  }
}
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	889b      	ldrh	r3, [r3, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d130      	bne.n	8007400 <USBD_SetAddress+0x74>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	88db      	ldrh	r3, [r3, #6]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d12c      	bne.n	8007400 <USBD_SetAddress+0x74>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	885b      	ldrh	r3, [r3, #2]
 80073aa:	2b7f      	cmp	r3, #127	; 0x7f
 80073ac:	d828      	bhi.n	8007400 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	885b      	ldrh	r3, [r3, #2]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d104      	bne.n	80073ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f989 	bl	80076de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073cc:	e01c      	b.n	8007408 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	7bfa      	ldrb	r2, [r7, #15]
 80073d2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 feea 	bl	80081b4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fa45 	bl	8007870 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f4:	e008      	b.n	8007408 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fe:	e003      	b.n	8007408 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f96b 	bl	80076de <USBD_CtlError>
  }
}
 8007408:	bf00      	nop
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	885b      	ldrh	r3, [r3, #2]
 800741e:	b2da      	uxtb	r2, r3
 8007420:	4b41      	ldr	r3, [pc, #260]	; (8007528 <USBD_SetConfig+0x118>)
 8007422:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007424:	4b40      	ldr	r3, [pc, #256]	; (8007528 <USBD_SetConfig+0x118>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d904      	bls.n	8007436 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f955 	bl	80076de <USBD_CtlError>
 8007434:	e075      	b.n	8007522 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800743c:	2b02      	cmp	r3, #2
 800743e:	d002      	beq.n	8007446 <USBD_SetConfig+0x36>
 8007440:	2b03      	cmp	r3, #3
 8007442:	d023      	beq.n	800748c <USBD_SetConfig+0x7c>
 8007444:	e062      	b.n	800750c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007446:	4b38      	ldr	r3, [pc, #224]	; (8007528 <USBD_SetConfig+0x118>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01a      	beq.n	8007484 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800744e:	4b36      	ldr	r3, [pc, #216]	; (8007528 <USBD_SetConfig+0x118>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2203      	movs	r2, #3
 800745c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007460:	4b31      	ldr	r3, [pc, #196]	; (8007528 <USBD_SetConfig+0x118>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff fa29 	bl	80068be <USBD_SetClassConfig>
 800746c:	4603      	mov	r3, r0
 800746e:	2b02      	cmp	r3, #2
 8007470:	d104      	bne.n	800747c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f932 	bl	80076de <USBD_CtlError>
          return;
 800747a:	e052      	b.n	8007522 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f9f7 	bl	8007870 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007482:	e04e      	b.n	8007522 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f9f3 	bl	8007870 <USBD_CtlSendStatus>
      break;
 800748a:	e04a      	b.n	8007522 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800748c:	4b26      	ldr	r3, [pc, #152]	; (8007528 <USBD_SetConfig+0x118>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d112      	bne.n	80074ba <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800749c:	4b22      	ldr	r3, [pc, #136]	; (8007528 <USBD_SetConfig+0x118>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80074a6:	4b20      	ldr	r3, [pc, #128]	; (8007528 <USBD_SetConfig+0x118>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff fa25 	bl	80068fc <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f9dc 	bl	8007870 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80074b8:	e033      	b.n	8007522 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80074ba:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <USBD_SetConfig+0x118>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d01d      	beq.n	8007504 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff fa13 	bl	80068fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <USBD_SetConfig+0x118>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074e0:	4b11      	ldr	r3, [pc, #68]	; (8007528 <USBD_SetConfig+0x118>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7ff f9e9 	bl	80068be <USBD_SetClassConfig>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d104      	bne.n	80074fc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f8f2 	bl	80076de <USBD_CtlError>
          return;
 80074fa:	e012      	b.n	8007522 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f9b7 	bl	8007870 <USBD_CtlSendStatus>
      break;
 8007502:	e00e      	b.n	8007522 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f9b3 	bl	8007870 <USBD_CtlSendStatus>
      break;
 800750a:	e00a      	b.n	8007522 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f8e5 	bl	80076de <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007514:	4b04      	ldr	r3, [pc, #16]	; (8007528 <USBD_SetConfig+0x118>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff f9ee 	bl	80068fc <USBD_ClrClassConfig>
      break;
 8007520:	bf00      	nop
    }
  }
}
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	20000214 	.word	0x20000214

0800752c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	88db      	ldrh	r3, [r3, #6]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d004      	beq.n	8007548 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f8cc 	bl	80076de <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007546:	e021      	b.n	800758c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800754e:	2b01      	cmp	r3, #1
 8007550:	db17      	blt.n	8007582 <USBD_GetConfig+0x56>
 8007552:	2b02      	cmp	r3, #2
 8007554:	dd02      	ble.n	800755c <USBD_GetConfig+0x30>
 8007556:	2b03      	cmp	r3, #3
 8007558:	d00b      	beq.n	8007572 <USBD_GetConfig+0x46>
 800755a:	e012      	b.n	8007582 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3308      	adds	r3, #8
 8007566:	2201      	movs	r2, #1
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f922 	bl	80077b4 <USBD_CtlSendData>
      break;
 8007570:	e00c      	b.n	800758c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3304      	adds	r3, #4
 8007576:	2201      	movs	r2, #1
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f91a 	bl	80077b4 <USBD_CtlSendData>
      break;
 8007580:	e004      	b.n	800758c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f8aa 	bl	80076de <USBD_CtlError>
      break;
 800758a:	bf00      	nop
}
 800758c:	bf00      	nop
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075a4:	3b01      	subs	r3, #1
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d81e      	bhi.n	80075e8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	88db      	ldrh	r3, [r3, #6]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d004      	beq.n	80075bc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f892 	bl	80076de <USBD_CtlError>
      break;
 80075ba:	e01a      	b.n	80075f2 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f043 0202 	orr.w	r2, r3, #2
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	330c      	adds	r3, #12
 80075dc:	2202      	movs	r2, #2
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8e7 	bl	80077b4 <USBD_CtlSendData>
    break;
 80075e6:	e004      	b.n	80075f2 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f877 	bl	80076de <USBD_CtlError>
    break;
 80075f0:	bf00      	nop
  }
}
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	885b      	ldrh	r3, [r3, #2]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d106      	bne.n	800761a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f92b 	bl	8007870 <USBD_CtlSendStatus>
  }

}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007632:	3b01      	subs	r3, #1
 8007634:	2b02      	cmp	r3, #2
 8007636:	d80b      	bhi.n	8007650 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	885b      	ldrh	r3, [r3, #2]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10c      	bne.n	800765a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f911 	bl	8007870 <USBD_CtlSendStatus>
    }
    break;
 800764e:	e004      	b.n	800765a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f843 	bl	80076de <USBD_CtlError>
    break;
 8007658:	e000      	b.n	800765c <USBD_ClrFeature+0x3a>
    break;
 800765a:	bf00      	nop
  }
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781a      	ldrb	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	785a      	ldrb	r2, [r3, #1]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	3302      	adds	r3, #2
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	b29a      	uxth	r2, r3
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	3303      	adds	r3, #3
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	b29b      	uxth	r3, r3
 8007692:	4413      	add	r3, r2
 8007694:	b29a      	uxth	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	3304      	adds	r3, #4
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	3305      	adds	r3, #5
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	4413      	add	r3, r2
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	3306      	adds	r3, #6
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	b29a      	uxth	r2, r3
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	3307      	adds	r3, #7
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	4413      	add	r3, r2
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	80da      	strh	r2, [r3, #6]

}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80076e8:	2180      	movs	r1, #128	; 0x80
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fcf8 	bl	80080e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80076f0:	2100      	movs	r1, #0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fcf4 	bl	80080e0 <USBD_LL_StallEP>
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d032      	beq.n	800777c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f834 	bl	8007784 <USBD_GetLen>
 800771c:	4603      	mov	r3, r0
 800771e:	3301      	adds	r3, #1
 8007720:	b29b      	uxth	r3, r3
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	b29a      	uxth	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	75fa      	strb	r2, [r7, #23]
 8007730:	461a      	mov	r2, r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	75fa      	strb	r2, [r7, #23]
 8007742:	461a      	mov	r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4413      	add	r3, r2
 8007748:	2203      	movs	r2, #3
 800774a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800774c:	e012      	b.n	8007774 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	60fa      	str	r2, [r7, #12]
 8007754:	7dfa      	ldrb	r2, [r7, #23]
 8007756:	1c51      	adds	r1, r2, #1
 8007758:	75f9      	strb	r1, [r7, #23]
 800775a:	4611      	mov	r1, r2
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	440a      	add	r2, r1
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	75fa      	strb	r2, [r7, #23]
 800776a:	461a      	mov	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4413      	add	r3, r2
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e8      	bne.n	800774e <USBD_GetString+0x4e>
    }
  }
}
 800777c:	bf00      	nop
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007790:	e005      	b.n	800779e <USBD_GetLen+0x1a>
    {
        len++;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	3301      	adds	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3301      	adds	r3, #1
 800779c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1f5      	bne.n	8007792 <USBD_GetLen+0xe>
    }

    return len;
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	4613      	mov	r3, r2
 80077c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2202      	movs	r2, #2
 80077c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80077ca:	88fa      	ldrh	r2, [r7, #6]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80077d0:	88fa      	ldrh	r2, [r7, #6]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	2100      	movs	r1, #0
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 fd08 	bl	80081f2 <USBD_LL_Transmit>

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	2100      	movs	r1, #0
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fcf6 	bl	80081f2 <USBD_LL_Transmit>

  return USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	4613      	mov	r3, r2
 800781c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2203      	movs	r2, #3
 8007822:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007826:	88fa      	ldrh	r2, [r7, #6]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800782e:	88fa      	ldrh	r2, [r7, #6]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007836:	88fb      	ldrh	r3, [r7, #6]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	2100      	movs	r1, #0
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fcfb 	bl	8008238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	2100      	movs	r1, #0
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fce9 	bl	8008238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2204      	movs	r2, #4
 800787c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007880:	2300      	movs	r3, #0
 8007882:	2200      	movs	r2, #0
 8007884:	2100      	movs	r1, #0
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fcb3 	bl	80081f2 <USBD_LL_Transmit>

  return USBD_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2205      	movs	r2, #5
 80078a2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80078a6:	2300      	movs	r3, #0
 80078a8:	2200      	movs	r2, #0
 80078aa:	2100      	movs	r1, #0
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fcc3 	bl	8008238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80078ca:	2301      	movs	r3, #1
 80078cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80078d2:	4b1f      	ldr	r3, [pc, #124]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078d4:	7a5b      	ldrb	r3, [r3, #9]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d131      	bne.n	8007940 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80078dc:	4b1c      	ldr	r3, [pc, #112]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078de:	7a5b      	ldrb	r3, [r3, #9]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078e6:	2100      	movs	r1, #0
 80078e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80078ea:	4b19      	ldr	r3, [pc, #100]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078ec:	7a5b      	ldrb	r3, [r3, #9]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	4a17      	ldr	r2, [pc, #92]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80078fa:	4b15      	ldr	r3, [pc, #84]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078fc:	7a5b      	ldrb	r3, [r3, #9]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	4b13      	ldr	r3, [pc, #76]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 8007904:	4413      	add	r3, r2
 8007906:	79fa      	ldrb	r2, [r7, #7]
 8007908:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800790a:	4b11      	ldr	r3, [pc, #68]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 800790c:	7a5b      	ldrb	r3, [r3, #9]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	b2d1      	uxtb	r1, r2
 8007914:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 8007916:	7251      	strb	r1, [r2, #9]
 8007918:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800791a:	7dbb      	ldrb	r3, [r7, #22]
 800791c:	3330      	adds	r3, #48	; 0x30
 800791e:	b2da      	uxtb	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	3301      	adds	r3, #1
 8007928:	223a      	movs	r2, #58	; 0x3a
 800792a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	3302      	adds	r3, #2
 8007930:	222f      	movs	r2, #47	; 0x2f
 8007932:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3303      	adds	r3, #3
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007940:	7dfb      	ldrb	r3, [r7, #23]
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000218 	.word	0x20000218

08007954 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800795e:	2200      	movs	r2, #0
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff ffaa 	bl	80078bc <FATFS_LinkDriverEx>
 8007968:	4603      	mov	r3, r0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007978:	2200      	movs	r2, #0
 800797a:	4912      	ldr	r1, [pc, #72]	; (80079c4 <MX_USB_DEVICE_Init+0x50>)
 800797c:	4812      	ldr	r0, [pc, #72]	; (80079c8 <MX_USB_DEVICE_Init+0x54>)
 800797e:	f7fe ff42 	bl	8006806 <USBD_Init>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007988:	f7f9 fece 	bl	8001728 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800798c:	490f      	ldr	r1, [pc, #60]	; (80079cc <MX_USB_DEVICE_Init+0x58>)
 800798e:	480e      	ldr	r0, [pc, #56]	; (80079c8 <MX_USB_DEVICE_Init+0x54>)
 8007990:	f7fe ff64 	bl	800685c <USBD_RegisterClass>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800799a:	f7f9 fec5 	bl	8001728 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800799e:	490c      	ldr	r1, [pc, #48]	; (80079d0 <MX_USB_DEVICE_Init+0x5c>)
 80079a0:	4809      	ldr	r0, [pc, #36]	; (80079c8 <MX_USB_DEVICE_Init+0x54>)
 80079a2:	f7fe feeb 	bl	800677c <USBD_CDC_RegisterInterface>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079ac:	f7f9 febc 	bl	8001728 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079b0:	4805      	ldr	r0, [pc, #20]	; (80079c8 <MX_USB_DEVICE_Init+0x54>)
 80079b2:	f7fe ff6d 	bl	8006890 <USBD_Start>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079bc:	f7f9 feb4 	bl	8001728 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079c0:	bf00      	nop
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	20000140 	.word	0x20000140
 80079c8:	20002404 	.word	0x20002404
 80079cc:	2000002c 	.word	0x2000002c
 80079d0:	20000130 	.word	0x20000130

080079d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079d8:	2200      	movs	r2, #0
 80079da:	4905      	ldr	r1, [pc, #20]	; (80079f0 <CDC_Init_FS+0x1c>)
 80079dc:	4805      	ldr	r0, [pc, #20]	; (80079f4 <CDC_Init_FS+0x20>)
 80079de:	f7fe fee4 	bl	80067aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079e2:	4905      	ldr	r1, [pc, #20]	; (80079f8 <CDC_Init_FS+0x24>)
 80079e4:	4803      	ldr	r0, [pc, #12]	; (80079f4 <CDC_Init_FS+0x20>)
 80079e6:	f7fe fefa 	bl	80067de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20002ea0 	.word	0x20002ea0
 80079f4:	20002404 	.word	0x20002404
 80079f8:	200026a0 	.word	0x200026a0

080079fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	6039      	str	r1, [r7, #0]
 8007a16:	71fb      	strb	r3, [r7, #7]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	2b23      	cmp	r3, #35	; 0x23
 8007a20:	d84a      	bhi.n	8007ab8 <CDC_Control_FS+0xac>
 8007a22:	a201      	add	r2, pc, #4	; (adr r2, 8007a28 <CDC_Control_FS+0x1c>)
 8007a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a28:	08007ab9 	.word	0x08007ab9
 8007a2c:	08007ab9 	.word	0x08007ab9
 8007a30:	08007ab9 	.word	0x08007ab9
 8007a34:	08007ab9 	.word	0x08007ab9
 8007a38:	08007ab9 	.word	0x08007ab9
 8007a3c:	08007ab9 	.word	0x08007ab9
 8007a40:	08007ab9 	.word	0x08007ab9
 8007a44:	08007ab9 	.word	0x08007ab9
 8007a48:	08007ab9 	.word	0x08007ab9
 8007a4c:	08007ab9 	.word	0x08007ab9
 8007a50:	08007ab9 	.word	0x08007ab9
 8007a54:	08007ab9 	.word	0x08007ab9
 8007a58:	08007ab9 	.word	0x08007ab9
 8007a5c:	08007ab9 	.word	0x08007ab9
 8007a60:	08007ab9 	.word	0x08007ab9
 8007a64:	08007ab9 	.word	0x08007ab9
 8007a68:	08007ab9 	.word	0x08007ab9
 8007a6c:	08007ab9 	.word	0x08007ab9
 8007a70:	08007ab9 	.word	0x08007ab9
 8007a74:	08007ab9 	.word	0x08007ab9
 8007a78:	08007ab9 	.word	0x08007ab9
 8007a7c:	08007ab9 	.word	0x08007ab9
 8007a80:	08007ab9 	.word	0x08007ab9
 8007a84:	08007ab9 	.word	0x08007ab9
 8007a88:	08007ab9 	.word	0x08007ab9
 8007a8c:	08007ab9 	.word	0x08007ab9
 8007a90:	08007ab9 	.word	0x08007ab9
 8007a94:	08007ab9 	.word	0x08007ab9
 8007a98:	08007ab9 	.word	0x08007ab9
 8007a9c:	08007ab9 	.word	0x08007ab9
 8007aa0:	08007ab9 	.word	0x08007ab9
 8007aa4:	08007ab9 	.word	0x08007ab9
 8007aa8:	08007ab9 	.word	0x08007ab9
 8007aac:	08007ab9 	.word	0x08007ab9
 8007ab0:	08007ab9 	.word	0x08007ab9
 8007ab4:	08007ab9 	.word	0x08007ab9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ab8:	bf00      	nop
  }

  return (USBD_OK);
 8007aba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  */
  return (USBD_OK);
 8007ad2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2212      	movs	r2, #18
 8007af0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007af2:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	2000015c 	.word	0x2000015c

08007b04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	6039      	str	r1, [r7, #0]
 8007b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2204      	movs	r2, #4
 8007b14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b16:	4b03      	ldr	r3, [pc, #12]	; (8007b24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	20000170 	.word	0x20000170

08007b28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	6039      	str	r1, [r7, #0]
 8007b32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b34:	79fb      	ldrb	r3, [r7, #7]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d105      	bne.n	8007b46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	4907      	ldr	r1, [pc, #28]	; (8007b5c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b3e:	4808      	ldr	r0, [pc, #32]	; (8007b60 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b40:	f7ff fdde 	bl	8007700 <USBD_GetString>
 8007b44:	e004      	b.n	8007b50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4904      	ldr	r1, [pc, #16]	; (8007b5c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b4a:	4805      	ldr	r0, [pc, #20]	; (8007b60 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b4c:	f7ff fdd8 	bl	8007700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b50:	4b02      	ldr	r3, [pc, #8]	; (8007b5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	200036a0 	.word	0x200036a0
 8007b60:	08008568 	.word	0x08008568

08007b64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	4904      	ldr	r1, [pc, #16]	; (8007b84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b74:	4804      	ldr	r0, [pc, #16]	; (8007b88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b76:	f7ff fdc3 	bl	8007700 <USBD_GetString>
  return USBD_StrDesc;
 8007b7a:	4b02      	ldr	r3, [pc, #8]	; (8007b84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	200036a0 	.word	0x200036a0
 8007b88:	08008580 	.word	0x08008580

08007b8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	221a      	movs	r2, #26
 8007b9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b9e:	f000 f843 	bl	8007c28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ba2:	4b02      	ldr	r3, [pc, #8]	; (8007bac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20000174 	.word	0x20000174

08007bb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	6039      	str	r1, [r7, #0]
 8007bba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	4907      	ldr	r1, [pc, #28]	; (8007be4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bc6:	4808      	ldr	r0, [pc, #32]	; (8007be8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bc8:	f7ff fd9a 	bl	8007700 <USBD_GetString>
 8007bcc:	e004      	b.n	8007bd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	4904      	ldr	r1, [pc, #16]	; (8007be4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bd2:	4805      	ldr	r0, [pc, #20]	; (8007be8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bd4:	f7ff fd94 	bl	8007700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bd8:	4b02      	ldr	r3, [pc, #8]	; (8007be4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	200036a0 	.word	0x200036a0
 8007be8:	08008594 	.word	0x08008594

08007bec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	6039      	str	r1, [r7, #0]
 8007bf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d105      	bne.n	8007c0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	4907      	ldr	r1, [pc, #28]	; (8007c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c02:	4808      	ldr	r0, [pc, #32]	; (8007c24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c04:	f7ff fd7c 	bl	8007700 <USBD_GetString>
 8007c08:	e004      	b.n	8007c14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	4904      	ldr	r1, [pc, #16]	; (8007c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c0e:	4805      	ldr	r0, [pc, #20]	; (8007c24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c10:	f7ff fd76 	bl	8007700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c14:	4b02      	ldr	r3, [pc, #8]	; (8007c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	200036a0 	.word	0x200036a0
 8007c24:	080085a0 	.word	0x080085a0

08007c28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <Get_SerialNum+0x44>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c34:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <Get_SerialNum+0x48>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c3a:	4b0e      	ldr	r3, [pc, #56]	; (8007c74 <Get_SerialNum+0x4c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4413      	add	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d009      	beq.n	8007c62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c4e:	2208      	movs	r2, #8
 8007c50:	4909      	ldr	r1, [pc, #36]	; (8007c78 <Get_SerialNum+0x50>)
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 f814 	bl	8007c80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c58:	2204      	movs	r2, #4
 8007c5a:	4908      	ldr	r1, [pc, #32]	; (8007c7c <Get_SerialNum+0x54>)
 8007c5c:	68b8      	ldr	r0, [r7, #8]
 8007c5e:	f000 f80f 	bl	8007c80 <IntToUnicode>
  }
}
 8007c62:	bf00      	nop
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	1fff7a10 	.word	0x1fff7a10
 8007c70:	1fff7a14 	.word	0x1fff7a14
 8007c74:	1fff7a18 	.word	0x1fff7a18
 8007c78:	20000176 	.word	0x20000176
 8007c7c:	20000186 	.word	0x20000186

08007c80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c92:	2300      	movs	r3, #0
 8007c94:	75fb      	strb	r3, [r7, #23]
 8007c96:	e027      	b.n	8007ce8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	0f1b      	lsrs	r3, r3, #28
 8007c9c:	2b09      	cmp	r3, #9
 8007c9e:	d80b      	bhi.n	8007cb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	0f1b      	lsrs	r3, r3, #28
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	4619      	mov	r1, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	440b      	add	r3, r1
 8007cb0:	3230      	adds	r2, #48	; 0x30
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	e00a      	b.n	8007cce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	0f1b      	lsrs	r3, r3, #28
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	440b      	add	r3, r1
 8007cc8:	3237      	adds	r2, #55	; 0x37
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	3301      	adds	r3, #1
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	4413      	add	r3, r2
 8007cde:	2200      	movs	r2, #0
 8007ce0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	75fb      	strb	r3, [r7, #23]
 8007ce8:	7dfa      	ldrb	r2, [r7, #23]
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d3d3      	bcc.n	8007c98 <IntToUnicode+0x18>
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08a      	sub	sp, #40	; 0x28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d04:	f107 0314 	add.w	r3, r7, #20
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	605a      	str	r2, [r3, #4]
 8007d0e:	609a      	str	r2, [r3, #8]
 8007d10:	60da      	str	r2, [r3, #12]
 8007d12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d1c:	d13a      	bne.n	8007d94 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d1e:	2300      	movs	r3, #0
 8007d20:	613b      	str	r3, [r7, #16]
 8007d22:	4b1e      	ldr	r3, [pc, #120]	; (8007d9c <HAL_PCD_MspInit+0xa0>)
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <HAL_PCD_MspInit+0xa0>)
 8007d28:	f043 0301 	orr.w	r3, r3, #1
 8007d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d2e:	4b1b      	ldr	r3, [pc, #108]	; (8007d9c <HAL_PCD_MspInit+0xa0>)
 8007d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007d3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d40:	2302      	movs	r3, #2
 8007d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d4c:	230a      	movs	r3, #10
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d50:	f107 0314 	add.w	r3, r7, #20
 8007d54:	4619      	mov	r1, r3
 8007d56:	4812      	ldr	r0, [pc, #72]	; (8007da0 <HAL_PCD_MspInit+0xa4>)
 8007d58:	f7fa f882 	bl	8001e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d5c:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <HAL_PCD_MspInit+0xa0>)
 8007d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d60:	4a0e      	ldr	r2, [pc, #56]	; (8007d9c <HAL_PCD_MspInit+0xa0>)
 8007d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d66:	6353      	str	r3, [r2, #52]	; 0x34
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <HAL_PCD_MspInit+0xa0>)
 8007d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d70:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <HAL_PCD_MspInit+0xa0>)
 8007d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d76:	6453      	str	r3, [r2, #68]	; 0x44
 8007d78:	4b08      	ldr	r3, [pc, #32]	; (8007d9c <HAL_PCD_MspInit+0xa0>)
 8007d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d84:	2200      	movs	r2, #0
 8007d86:	2100      	movs	r1, #0
 8007d88:	2043      	movs	r0, #67	; 0x43
 8007d8a:	f7fa f832 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d8e:	2043      	movs	r0, #67	; 0x43
 8007d90:	f7fa f84b 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d94:	bf00      	nop
 8007d96:	3728      	adds	r7, #40	; 0x28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	40023800 	.word	0x40023800
 8007da0:	40020000 	.word	0x40020000

08007da4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007db8:	4619      	mov	r1, r3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	f7fe fdb1 	bl	8006922 <USBD_LL_SetupStage>
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007dda:	78fa      	ldrb	r2, [r7, #3]
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	4613      	mov	r3, r2
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	1a9b      	subs	r3, r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	440b      	add	r3, r1
 8007de8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	78fb      	ldrb	r3, [r7, #3]
 8007df0:	4619      	mov	r1, r3
 8007df2:	f7fe fde1 	bl	80069b8 <USBD_LL_DataOutStage>
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e10:	78fa      	ldrb	r2, [r7, #3]
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	4613      	mov	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	1a9b      	subs	r3, r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	3348      	adds	r3, #72	; 0x48
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	4619      	mov	r1, r3
 8007e26:	f7fe fe38 	bl	8006a9a <USBD_LL_DataInStage>
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe ff46 	bl	8006cd2 <USBD_LL_SOF>
}
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e56:	2301      	movs	r3, #1
 8007e58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d102      	bne.n	8007e68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]
 8007e66:	e008      	b.n	8007e7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d102      	bne.n	8007e76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007e70:	2301      	movs	r3, #1
 8007e72:	73fb      	strb	r3, [r7, #15]
 8007e74:	e001      	b.n	8007e7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007e76:	f7f9 fc57 	bl	8001728 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e80:	7bfa      	ldrb	r2, [r7, #15]
 8007e82:	4611      	mov	r1, r2
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fe feee 	bl	8006c66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe fea7 	bl	8006be4 <USBD_LL_Reset>
}
 8007e96:	bf00      	nop
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fee9 	bl	8006c86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ec6:	f043 0301 	orr.w	r3, r3, #1
 8007eca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ed4:	4b04      	ldr	r3, [pc, #16]	; (8007ee8 <HAL_PCD_SuspendCallback+0x48>)
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	4a03      	ldr	r2, [pc, #12]	; (8007ee8 <HAL_PCD_SuspendCallback+0x48>)
 8007eda:	f043 0306 	orr.w	r3, r3, #6
 8007ede:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	e000ed00 	.word	0xe000ed00

08007eec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe fed8 	bl	8006cb0 <USBD_LL_Resume>
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f1a:	78fa      	ldrb	r2, [r7, #3]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fefe 	bl	8006d20 <USBD_LL_IsoOUTIncomplete>
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f3e:	78fa      	ldrb	r2, [r7, #3]
 8007f40:	4611      	mov	r1, r2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe fedf 	bl	8006d06 <USBD_LL_IsoINIncomplete>
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe feeb 	bl	8006d3a <USBD_LL_DevConnected>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fee8 	bl	8006d50 <USBD_LL_DevDisconnected>
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d13c      	bne.n	8008012 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f98:	4a20      	ldr	r2, [pc, #128]	; (800801c <USBD_LL_Init+0x94>)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a1e      	ldr	r2, [pc, #120]	; (800801c <USBD_LL_Init+0x94>)
 8007fa4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fa8:	4b1c      	ldr	r3, [pc, #112]	; (800801c <USBD_LL_Init+0x94>)
 8007faa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007fb0:	4b1a      	ldr	r3, [pc, #104]	; (800801c <USBD_LL_Init+0x94>)
 8007fb2:	2204      	movs	r2, #4
 8007fb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007fb6:	4b19      	ldr	r3, [pc, #100]	; (800801c <USBD_LL_Init+0x94>)
 8007fb8:	2202      	movs	r2, #2
 8007fba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fbc:	4b17      	ldr	r3, [pc, #92]	; (800801c <USBD_LL_Init+0x94>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007fc2:	4b16      	ldr	r3, [pc, #88]	; (800801c <USBD_LL_Init+0x94>)
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fc8:	4b14      	ldr	r3, [pc, #80]	; (800801c <USBD_LL_Init+0x94>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007fce:	4b13      	ldr	r3, [pc, #76]	; (800801c <USBD_LL_Init+0x94>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007fd4:	4b11      	ldr	r3, [pc, #68]	; (800801c <USBD_LL_Init+0x94>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007fda:	4b10      	ldr	r3, [pc, #64]	; (800801c <USBD_LL_Init+0x94>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fe0:	4b0e      	ldr	r3, [pc, #56]	; (800801c <USBD_LL_Init+0x94>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fe6:	480d      	ldr	r0, [pc, #52]	; (800801c <USBD_LL_Init+0x94>)
 8007fe8:	f7fa fd51 	bl	8002a8e <HAL_PCD_Init>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ff2:	f7f9 fb99 	bl	8001728 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ff6:	2180      	movs	r1, #128	; 0x80
 8007ff8:	4808      	ldr	r0, [pc, #32]	; (800801c <USBD_LL_Init+0x94>)
 8007ffa:	f7fb feb6 	bl	8003d6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ffe:	2240      	movs	r2, #64	; 0x40
 8008000:	2100      	movs	r1, #0
 8008002:	4806      	ldr	r0, [pc, #24]	; (800801c <USBD_LL_Init+0x94>)
 8008004:	f7fb fe6a 	bl	8003cdc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008008:	2280      	movs	r2, #128	; 0x80
 800800a:	2101      	movs	r1, #1
 800800c:	4803      	ldr	r0, [pc, #12]	; (800801c <USBD_LL_Init+0x94>)
 800800e:	f7fb fe65 	bl	8003cdc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	200038a0 	.word	0x200038a0

08008020 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008036:	4618      	mov	r0, r3
 8008038:	f7fa fe46 	bl	8002cc8 <HAL_PCD_Start>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 f92e 	bl	80082a4 <USBD_Get_USB_Status>
 8008048:	4603      	mov	r3, r0
 800804a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800804c:	7bbb      	ldrb	r3, [r7, #14]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	4608      	mov	r0, r1
 8008060:	4611      	mov	r1, r2
 8008062:	461a      	mov	r2, r3
 8008064:	4603      	mov	r3, r0
 8008066:	70fb      	strb	r3, [r7, #3]
 8008068:	460b      	mov	r3, r1
 800806a:	70bb      	strb	r3, [r7, #2]
 800806c:	4613      	mov	r3, r2
 800806e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800807e:	78bb      	ldrb	r3, [r7, #2]
 8008080:	883a      	ldrh	r2, [r7, #0]
 8008082:	78f9      	ldrb	r1, [r7, #3]
 8008084:	f7fb fa1b 	bl	80034be <HAL_PCD_EP_Open>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f908 	bl	80082a4 <USBD_Get_USB_Status>
 8008094:	4603      	mov	r3, r0
 8008096:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008098:	7bbb      	ldrb	r3, [r7, #14]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80080bc:	78fa      	ldrb	r2, [r7, #3]
 80080be:	4611      	mov	r1, r2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fb fa64 	bl	800358e <HAL_PCD_EP_Close>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 f8e9 	bl	80082a4 <USBD_Get_USB_Status>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	4611      	mov	r1, r2
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fb fb3c 	bl	800377c <HAL_PCD_EP_SetStall>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	4618      	mov	r0, r3
 800810c:	f000 f8ca 	bl	80082a4 <USBD_Get_USB_Status>
 8008110:	4603      	mov	r3, r0
 8008112:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008114:	7bbb      	ldrb	r3, [r7, #14]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f7fb fb81 	bl	8003844 <HAL_PCD_EP_ClrStall>
 8008142:	4603      	mov	r3, r0
 8008144:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8008146:	7bfb      	ldrb	r3, [r7, #15]
 8008148:	4618      	mov	r0, r3
 800814a:	f000 f8ab 	bl	80082a4 <USBD_Get_USB_Status>
 800814e:	4603      	mov	r3, r0
 8008150:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8008152:	7bbb      	ldrb	r3, [r7, #14]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800816e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008174:	2b00      	cmp	r3, #0
 8008176:	da0b      	bge.n	8008190 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800817e:	68f9      	ldr	r1, [r7, #12]
 8008180:	4613      	mov	r3, r2
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	333e      	adds	r3, #62	; 0x3e
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	e00b      	b.n	80081a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008196:	68f9      	ldr	r1, [r7, #12]
 8008198:	4613      	mov	r3, r2
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	1a9b      	subs	r3, r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80081a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	4611      	mov	r1, r2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fb f94e 	bl	8003474 <HAL_PCD_SetAddress>
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 f860 	bl	80082a4 <USBD_Get_USB_Status>
 80081e4:	4603      	mov	r3, r0
 80081e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b086      	sub	sp, #24
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	461a      	mov	r2, r3
 80081fe:	460b      	mov	r3, r1
 8008200:	72fb      	strb	r3, [r7, #11]
 8008202:	4613      	mov	r3, r2
 8008204:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008214:	893b      	ldrh	r3, [r7, #8]
 8008216:	7af9      	ldrb	r1, [r7, #11]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	f7fb fa65 	bl	80036e8 <HAL_PCD_EP_Transmit>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f83d 	bl	80082a4 <USBD_Get_USB_Status>
 800822a:	4603      	mov	r3, r0
 800822c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800822e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	461a      	mov	r2, r3
 8008244:	460b      	mov	r3, r1
 8008246:	72fb      	strb	r3, [r7, #11]
 8008248:	4613      	mov	r3, r2
 800824a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800825a:	893b      	ldrh	r3, [r7, #8]
 800825c:	7af9      	ldrb	r1, [r7, #11]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	f7fb f9df 	bl	8003622 <HAL_PCD_EP_Receive>
 8008264:	4603      	mov	r3, r0
 8008266:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	4618      	mov	r0, r3
 800826c:	f000 f81a 	bl	80082a4 <USBD_Get_USB_Status>
 8008270:	4603      	mov	r3, r0
 8008272:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008274:	7dbb      	ldrb	r3, [r7, #22]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008290:	78fa      	ldrb	r2, [r7, #3]
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f7fb fa0f 	bl	80036b8 <HAL_PCD_EP_GetRxCount>
 800829a:	4603      	mov	r3, r0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d817      	bhi.n	80082e8 <USBD_Get_USB_Status+0x44>
 80082b8:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <USBD_Get_USB_Status+0x1c>)
 80082ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082be:	bf00      	nop
 80082c0:	080082d1 	.word	0x080082d1
 80082c4:	080082d7 	.word	0x080082d7
 80082c8:	080082dd 	.word	0x080082dd
 80082cc:	080082e3 	.word	0x080082e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73fb      	strb	r3, [r7, #15]
    break;
 80082d4:	e00b      	b.n	80082ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082d6:	2302      	movs	r3, #2
 80082d8:	73fb      	strb	r3, [r7, #15]
    break;
 80082da:	e008      	b.n	80082ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082dc:	2301      	movs	r3, #1
 80082de:	73fb      	strb	r3, [r7, #15]
    break;
 80082e0:	e005      	b.n	80082ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082e2:	2302      	movs	r3, #2
 80082e4:	73fb      	strb	r3, [r7, #15]
    break;
 80082e6:	e002      	b.n	80082ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082e8:	2302      	movs	r3, #2
 80082ea:	73fb      	strb	r3, [r7, #15]
    break;
 80082ec:	bf00      	nop
  }
  return usb_status;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <__errno>:
 80082fc:	4b01      	ldr	r3, [pc, #4]	; (8008304 <__errno+0x8>)
 80082fe:	6818      	ldr	r0, [r3, #0]
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	20000190 	.word	0x20000190

08008308 <__libc_init_array>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	4e0d      	ldr	r6, [pc, #52]	; (8008340 <__libc_init_array+0x38>)
 800830c:	4c0d      	ldr	r4, [pc, #52]	; (8008344 <__libc_init_array+0x3c>)
 800830e:	1ba4      	subs	r4, r4, r6
 8008310:	10a4      	asrs	r4, r4, #2
 8008312:	2500      	movs	r5, #0
 8008314:	42a5      	cmp	r5, r4
 8008316:	d109      	bne.n	800832c <__libc_init_array+0x24>
 8008318:	4e0b      	ldr	r6, [pc, #44]	; (8008348 <__libc_init_array+0x40>)
 800831a:	4c0c      	ldr	r4, [pc, #48]	; (800834c <__libc_init_array+0x44>)
 800831c:	f000 f902 	bl	8008524 <_init>
 8008320:	1ba4      	subs	r4, r4, r6
 8008322:	10a4      	asrs	r4, r4, #2
 8008324:	2500      	movs	r5, #0
 8008326:	42a5      	cmp	r5, r4
 8008328:	d105      	bne.n	8008336 <__libc_init_array+0x2e>
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008330:	4798      	blx	r3
 8008332:	3501      	adds	r5, #1
 8008334:	e7ee      	b.n	8008314 <__libc_init_array+0xc>
 8008336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800833a:	4798      	blx	r3
 800833c:	3501      	adds	r5, #1
 800833e:	e7f2      	b.n	8008326 <__libc_init_array+0x1e>
 8008340:	080085d0 	.word	0x080085d0
 8008344:	080085d0 	.word	0x080085d0
 8008348:	080085d0 	.word	0x080085d0
 800834c:	080085d4 	.word	0x080085d4

08008350 <malloc>:
 8008350:	4b02      	ldr	r3, [pc, #8]	; (800835c <malloc+0xc>)
 8008352:	4601      	mov	r1, r0
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	f000 b861 	b.w	800841c <_malloc_r>
 800835a:	bf00      	nop
 800835c:	20000190 	.word	0x20000190

08008360 <free>:
 8008360:	4b02      	ldr	r3, [pc, #8]	; (800836c <free+0xc>)
 8008362:	4601      	mov	r1, r0
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	f000 b80b 	b.w	8008380 <_free_r>
 800836a:	bf00      	nop
 800836c:	20000190 	.word	0x20000190

08008370 <memset>:
 8008370:	4402      	add	r2, r0
 8008372:	4603      	mov	r3, r0
 8008374:	4293      	cmp	r3, r2
 8008376:	d100      	bne.n	800837a <memset+0xa>
 8008378:	4770      	bx	lr
 800837a:	f803 1b01 	strb.w	r1, [r3], #1
 800837e:	e7f9      	b.n	8008374 <memset+0x4>

08008380 <_free_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4605      	mov	r5, r0
 8008384:	2900      	cmp	r1, #0
 8008386:	d045      	beq.n	8008414 <_free_r+0x94>
 8008388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800838c:	1f0c      	subs	r4, r1, #4
 800838e:	2b00      	cmp	r3, #0
 8008390:	bfb8      	it	lt
 8008392:	18e4      	addlt	r4, r4, r3
 8008394:	f000 f8c3 	bl	800851e <__malloc_lock>
 8008398:	4a1f      	ldr	r2, [pc, #124]	; (8008418 <_free_r+0x98>)
 800839a:	6813      	ldr	r3, [r2, #0]
 800839c:	4610      	mov	r0, r2
 800839e:	b933      	cbnz	r3, 80083ae <_free_r+0x2e>
 80083a0:	6063      	str	r3, [r4, #4]
 80083a2:	6014      	str	r4, [r2, #0]
 80083a4:	4628      	mov	r0, r5
 80083a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083aa:	f000 b8b9 	b.w	8008520 <__malloc_unlock>
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	d90c      	bls.n	80083cc <_free_r+0x4c>
 80083b2:	6821      	ldr	r1, [r4, #0]
 80083b4:	1862      	adds	r2, r4, r1
 80083b6:	4293      	cmp	r3, r2
 80083b8:	bf04      	itt	eq
 80083ba:	681a      	ldreq	r2, [r3, #0]
 80083bc:	685b      	ldreq	r3, [r3, #4]
 80083be:	6063      	str	r3, [r4, #4]
 80083c0:	bf04      	itt	eq
 80083c2:	1852      	addeq	r2, r2, r1
 80083c4:	6022      	streq	r2, [r4, #0]
 80083c6:	6004      	str	r4, [r0, #0]
 80083c8:	e7ec      	b.n	80083a4 <_free_r+0x24>
 80083ca:	4613      	mov	r3, r2
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	b10a      	cbz	r2, 80083d4 <_free_r+0x54>
 80083d0:	42a2      	cmp	r2, r4
 80083d2:	d9fa      	bls.n	80083ca <_free_r+0x4a>
 80083d4:	6819      	ldr	r1, [r3, #0]
 80083d6:	1858      	adds	r0, r3, r1
 80083d8:	42a0      	cmp	r0, r4
 80083da:	d10b      	bne.n	80083f4 <_free_r+0x74>
 80083dc:	6820      	ldr	r0, [r4, #0]
 80083de:	4401      	add	r1, r0
 80083e0:	1858      	adds	r0, r3, r1
 80083e2:	4282      	cmp	r2, r0
 80083e4:	6019      	str	r1, [r3, #0]
 80083e6:	d1dd      	bne.n	80083a4 <_free_r+0x24>
 80083e8:	6810      	ldr	r0, [r2, #0]
 80083ea:	6852      	ldr	r2, [r2, #4]
 80083ec:	605a      	str	r2, [r3, #4]
 80083ee:	4401      	add	r1, r0
 80083f0:	6019      	str	r1, [r3, #0]
 80083f2:	e7d7      	b.n	80083a4 <_free_r+0x24>
 80083f4:	d902      	bls.n	80083fc <_free_r+0x7c>
 80083f6:	230c      	movs	r3, #12
 80083f8:	602b      	str	r3, [r5, #0]
 80083fa:	e7d3      	b.n	80083a4 <_free_r+0x24>
 80083fc:	6820      	ldr	r0, [r4, #0]
 80083fe:	1821      	adds	r1, r4, r0
 8008400:	428a      	cmp	r2, r1
 8008402:	bf04      	itt	eq
 8008404:	6811      	ldreq	r1, [r2, #0]
 8008406:	6852      	ldreq	r2, [r2, #4]
 8008408:	6062      	str	r2, [r4, #4]
 800840a:	bf04      	itt	eq
 800840c:	1809      	addeq	r1, r1, r0
 800840e:	6021      	streq	r1, [r4, #0]
 8008410:	605c      	str	r4, [r3, #4]
 8008412:	e7c7      	b.n	80083a4 <_free_r+0x24>
 8008414:	bd38      	pop	{r3, r4, r5, pc}
 8008416:	bf00      	nop
 8008418:	20000224 	.word	0x20000224

0800841c <_malloc_r>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	1ccd      	adds	r5, r1, #3
 8008420:	f025 0503 	bic.w	r5, r5, #3
 8008424:	3508      	adds	r5, #8
 8008426:	2d0c      	cmp	r5, #12
 8008428:	bf38      	it	cc
 800842a:	250c      	movcc	r5, #12
 800842c:	2d00      	cmp	r5, #0
 800842e:	4606      	mov	r6, r0
 8008430:	db01      	blt.n	8008436 <_malloc_r+0x1a>
 8008432:	42a9      	cmp	r1, r5
 8008434:	d903      	bls.n	800843e <_malloc_r+0x22>
 8008436:	230c      	movs	r3, #12
 8008438:	6033      	str	r3, [r6, #0]
 800843a:	2000      	movs	r0, #0
 800843c:	bd70      	pop	{r4, r5, r6, pc}
 800843e:	f000 f86e 	bl	800851e <__malloc_lock>
 8008442:	4a21      	ldr	r2, [pc, #132]	; (80084c8 <_malloc_r+0xac>)
 8008444:	6814      	ldr	r4, [r2, #0]
 8008446:	4621      	mov	r1, r4
 8008448:	b991      	cbnz	r1, 8008470 <_malloc_r+0x54>
 800844a:	4c20      	ldr	r4, [pc, #128]	; (80084cc <_malloc_r+0xb0>)
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	b91b      	cbnz	r3, 8008458 <_malloc_r+0x3c>
 8008450:	4630      	mov	r0, r6
 8008452:	f000 f83d 	bl	80084d0 <_sbrk_r>
 8008456:	6020      	str	r0, [r4, #0]
 8008458:	4629      	mov	r1, r5
 800845a:	4630      	mov	r0, r6
 800845c:	f000 f838 	bl	80084d0 <_sbrk_r>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d124      	bne.n	80084ae <_malloc_r+0x92>
 8008464:	230c      	movs	r3, #12
 8008466:	6033      	str	r3, [r6, #0]
 8008468:	4630      	mov	r0, r6
 800846a:	f000 f859 	bl	8008520 <__malloc_unlock>
 800846e:	e7e4      	b.n	800843a <_malloc_r+0x1e>
 8008470:	680b      	ldr	r3, [r1, #0]
 8008472:	1b5b      	subs	r3, r3, r5
 8008474:	d418      	bmi.n	80084a8 <_malloc_r+0x8c>
 8008476:	2b0b      	cmp	r3, #11
 8008478:	d90f      	bls.n	800849a <_malloc_r+0x7e>
 800847a:	600b      	str	r3, [r1, #0]
 800847c:	50cd      	str	r5, [r1, r3]
 800847e:	18cc      	adds	r4, r1, r3
 8008480:	4630      	mov	r0, r6
 8008482:	f000 f84d 	bl	8008520 <__malloc_unlock>
 8008486:	f104 000b 	add.w	r0, r4, #11
 800848a:	1d23      	adds	r3, r4, #4
 800848c:	f020 0007 	bic.w	r0, r0, #7
 8008490:	1ac3      	subs	r3, r0, r3
 8008492:	d0d3      	beq.n	800843c <_malloc_r+0x20>
 8008494:	425a      	negs	r2, r3
 8008496:	50e2      	str	r2, [r4, r3]
 8008498:	e7d0      	b.n	800843c <_malloc_r+0x20>
 800849a:	428c      	cmp	r4, r1
 800849c:	684b      	ldr	r3, [r1, #4]
 800849e:	bf16      	itet	ne
 80084a0:	6063      	strne	r3, [r4, #4]
 80084a2:	6013      	streq	r3, [r2, #0]
 80084a4:	460c      	movne	r4, r1
 80084a6:	e7eb      	b.n	8008480 <_malloc_r+0x64>
 80084a8:	460c      	mov	r4, r1
 80084aa:	6849      	ldr	r1, [r1, #4]
 80084ac:	e7cc      	b.n	8008448 <_malloc_r+0x2c>
 80084ae:	1cc4      	adds	r4, r0, #3
 80084b0:	f024 0403 	bic.w	r4, r4, #3
 80084b4:	42a0      	cmp	r0, r4
 80084b6:	d005      	beq.n	80084c4 <_malloc_r+0xa8>
 80084b8:	1a21      	subs	r1, r4, r0
 80084ba:	4630      	mov	r0, r6
 80084bc:	f000 f808 	bl	80084d0 <_sbrk_r>
 80084c0:	3001      	adds	r0, #1
 80084c2:	d0cf      	beq.n	8008464 <_malloc_r+0x48>
 80084c4:	6025      	str	r5, [r4, #0]
 80084c6:	e7db      	b.n	8008480 <_malloc_r+0x64>
 80084c8:	20000224 	.word	0x20000224
 80084cc:	20000228 	.word	0x20000228

080084d0 <_sbrk_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4c06      	ldr	r4, [pc, #24]	; (80084ec <_sbrk_r+0x1c>)
 80084d4:	2300      	movs	r3, #0
 80084d6:	4605      	mov	r5, r0
 80084d8:	4608      	mov	r0, r1
 80084da:	6023      	str	r3, [r4, #0]
 80084dc:	f7f9 faae 	bl	8001a3c <_sbrk>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d102      	bne.n	80084ea <_sbrk_r+0x1a>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	b103      	cbz	r3, 80084ea <_sbrk_r+0x1a>
 80084e8:	602b      	str	r3, [r5, #0]
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	20003ca8 	.word	0x20003ca8

080084f0 <strcat>:
 80084f0:	b510      	push	{r4, lr}
 80084f2:	4603      	mov	r3, r0
 80084f4:	781a      	ldrb	r2, [r3, #0]
 80084f6:	1c5c      	adds	r4, r3, #1
 80084f8:	b93a      	cbnz	r2, 800850a <strcat+0x1a>
 80084fa:	3b01      	subs	r3, #1
 80084fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008500:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008504:	2a00      	cmp	r2, #0
 8008506:	d1f9      	bne.n	80084fc <strcat+0xc>
 8008508:	bd10      	pop	{r4, pc}
 800850a:	4623      	mov	r3, r4
 800850c:	e7f2      	b.n	80084f4 <strcat+0x4>

0800850e <strcpy>:
 800850e:	4603      	mov	r3, r0
 8008510:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008514:	f803 2b01 	strb.w	r2, [r3], #1
 8008518:	2a00      	cmp	r2, #0
 800851a:	d1f9      	bne.n	8008510 <strcpy+0x2>
 800851c:	4770      	bx	lr

0800851e <__malloc_lock>:
 800851e:	4770      	bx	lr

08008520 <__malloc_unlock>:
 8008520:	4770      	bx	lr
	...

08008524 <_init>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr

08008530 <_fini>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr
